#!/usr/bin/env bash

# Usage:
#   ./bin/generate_protobufs service.foo

# This script should be used to generate protobufs on your local machine. It is a wrapper around bin/_generate_protobufs,
# with some added checks on the installed protoc and protobuf version numbers.

set -e

# Initialise
self="${BASH_SOURCE[0]}"
bindir=$(dirname "$self")
PROJECT_ROOT=$(dirname "$bindir")

# This is the required minor version of Go. You can confirm your current version
# using `go version`.
# See https://github.com/monzo/wearedev/blob/master/README.md#install-go for the
# recommended version of Go.
GO_MINOR_VERSION="(1.8|1.9|1.10|1.11|1.12|1.13|1.14|1.15)"
# This is the required version of protoc. You can confirm your current version
# using `protoc --version`.
# If you are sure you want to upgrade the required version, update the value
# below.
# TODO: Remove the 3.13.0 instructions below (line 63+64) when we move to a later version
PROTOC_VERSION="3.13.0"
# This is the sha of the required commit of github.com/golang/protobuf. You can
# confirm the commit you are on using `git log` inside the repository.
# If you are sure you want to upgrade the required version, update the value
# below.
# This corresponds to release tag v1.3.2
PROTOBUF_GIT_SHA="6c65a5562fc06764971b7c5d05c76c75e84bdbf7"

is_experimental=false

while getopts 'x' flag; do
  case "${flag}" in
    x) is_experimental=true ;;
  esac
done

# Remove optional flag params and continue as normal
shift $(( OPTIND - 1 ))

# We only need to compare the minor version of protoc
PROTOC_MINOR_VERSION=`echo $PROTOC_VERSION | cut -d "." -f 1,2`

if (( $# != 1 )); then
  echo "Usage: $0 <target_dir>"
  exit 1
elif ! go version | egrep -q "^go version go$GO_MINOR_VERSION(.\d+)? \w+/\w+$"; then
  echo "You need minor version $GO_MINOR_VERSION of go."
  exit 1
elif ! hash protoc 2>/dev/null; then
  echo "protoc binary not found. Please install protobuf using"
  echo "  brew install protobuf"
  exit 1
elif ! protoc --version  | egrep -q "^libprotoc $PROTOC_MINOR_VERSION\.\d+$" ; then
  echo "You need version $PROTOC_MINOR_VERSION of protoc. Please upgrade using"
  #TODO: Remove me when we move to a later version
  echo "We're currently using an old version of protoc, use the following to pull 3.13.0"
  echo "brew uninstall protobuf && brew install https://dl.bintray.com/homebrew/bottles/protobuf-3.13.0_1.catalina.bottle.tar.gz"
  #echo "  brew upgrade protobuf"
  #echo "If you are on the latest version, perhaps everyone needs to upgrade? See instructions in bin/generate_protobufs."
  exit 1
elif ! hash protoc-gen-go 2>/dev/null; then
  echo "protoc-gen-go not found. Please install using"
  echo "  go get -u github.com/golang/protobuf/{proto,protoc-gen-go}"
  echo "Also make sure \$GOPATH/bin is in your \$PATH"
  exit 1
elif [[ $(git --git-dir="$GOPATH/src/github.com/golang/protobuf/.git" rev-parse head) != $PROTOBUF_GIT_SHA ]]; then
  echo "You need commit $PROTOBUF_GIT_SHA of github.com/golang/protobuf. Please upgrade using"
  echo "  cd $GOPATH/src/github.com/golang/protobuf"
  echo "  git fetch && git checkout $PROTOBUF_GIT_SHA"
  echo "  go install github.com/golang/protobuf/{proto,protoc-gen-go}"
  echo "If you are on the latest version, perhaps everyone needs to upgrade? See instructions in bin/generate_protobufs."
  exit 1
fi

_realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

ROOT=$(_realpath "${1}")
echo "$ROOT"
if ! [[ -d $ROOT ]]
then
    >&2 echo "Provide a valid directory name"
    exit 1
fi

# Clean out old autogenerated files from the target directory
find $ROOT -maxdepth 3 -type f -name "*.pb.go" -exec rm -rf {} \;

if [[ "$is_experimental" = true ]]
then
  ${PROJECT_ROOT}/bin/_generate_protobufs -x $1 $GOPATH/src
else
  ${PROJECT_ROOT}/bin/_generate_protobufs $1 $GOPATH/src
fi

${PROJECT_ROOT}/bin/generate_python_protobufs $1
