syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "s.trade-engine/proto/tradeengine.proto";

option go_package = "swallowtail/s.account/proto;accountproto";

service account {

  /// --- Accounts --- ///
  rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse) {
  }

  rpc ReadAccount (ReadAccountRequest) returns (ReadAccountResponse) {
  }

  rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse) {
  }

  rpc UpdateAccount (UpdateAccountRequest) returns (UpdateAccountResponse) {
  }

  rpc PageAccount (PageAccountRequest) returns (PageAccountResponse) {
  }

  /// --- Venue Account --- ///
  rpc AddVenueAccount (AddVenueAccountRequest) returns (AddVenueAccountResponse) {
  }

  rpc ListVenueAccounts (ListVenueAccountsRequest) returns (ListVenueAccountsResponse) {
  }

  // TODO: update name to include ID
  rpc ReadVenueAccountByVenueID (ReadVenueAccountByVenueIDRequest) returns (ReadVenueAccountByVenueIDResponse) {
  }

  rpc ReadVenueAccountByVenueAccountDetails (ReadVenueAccountByVenueAccountDetailsRequest) returns (ReadVenueAccountByVenueAccountDetailsResponse) {
  }

  rpc ReadPrimaryVenueAccountByUserID (ReadPrimaryVenueAccountByUserIDRequest) returns (ReadPrimaryVenueAccountByUserIDResponse) {}
}

enum PagerType {
    DISCORD = 0;
    PHONE = 1;
    SMS = 2;
    EMAIL = 3;
}

enum PagerPriority {
    HIGH = 0;
    LOW = 1;
}

// Only used for responses, we currently don't have mechanisms to remove sensitived data such
// as keys or phones. This should only contain insensitive data.
message Account {
    string user_id = 1;
    string email = 2;
    bool is_futures_member = 3;
    bool is_admin = 4;
    string username = 5;
    google.protobuf.Timestamp created = 6;
    google.protobuf.Timestamp last_updated = 7;
    string primary_venue_account = 8;
    string default_dca_strategy = 9;
}

message ListAccountsRequest{
    bool is_futures_member = 1;
}

message ListAccountsResponse {
    repeated Account accounts = 1;
}

message ReadAccountRequest {
    string user_id = 1;
}

message ReadAccountResponse {
    Account account = 1;
}

message CreateAccountRequest {
    string user_id = 4;
    string username = 1;
    string password = 2;
    string email = 3;
    string phone_number = 5;
    PagerType high_priority_pager = 6;
    PagerType low_priority_pager = 7;
}

message CreateAccountResponse {}

message UpdateAccountRequest {
    string user_id = 1;
    string username = 2;
    string password = 3;
    string email = 4;
    string phone_number = 5;
    PagerType high_priority_pager = 6;
    PagerType low_priority_pager = 7;
    bool is_admin = 9;
    bool is_futures = 10; 
    string actor_id = 11;
    string default_dca_strategy = 12;
}

message UpdateAccountResponse {
    Account account = 1;
}

message PageAccountRequest {
    string user_id = 1;
    string content = 2;
    PagerPriority priority = 3;
}

message PageAccountResponse {}

message VenueAccount {
    VENUE venue = 1;
    string api_key = 2;
    string secret_key = 3;
    string sub_account = 4;
    bool is_active = 5;
    string venue_account_id = 6;
}

message AddVenueAccountRequest {
    VenueAccount venue_account = 1;
    string user_id = 2;
}

message AddVenueAccountResponse {
    VenueAccount venue_account = 1;
    bool verified = 2;
    string reason = 3;
}

message ListVenueAccountsRequest {
    string user_id = 1;
    bool active_only = 2;
    string actor_id = 3;
    bool with_unmaasked_credentials = 4;
}

message ListVenueAccountsResponse {
    repeated VenueAccount venue_accounts = 1;
}

message ReadVenueAccountByVenueIDRequest {
    VENUE venue = 1;
}

message ReadVenueAccountByVenueIDResponse{
    VenueAccount venue_account = 1;
}

message ReadPrimaryVenueAccountByUserIDRequest {
    string user_id = 1;
    string actor_id = 2;
}

message ReadPrimaryVenueAccountByUserIDResponse {
    VenueAccount primary_venue_account = 1;
}

message ReadVenueAccountByVenueAccountDetailsRequest {
    VENUE venue = 1;
    string user_id = 2;
    string subaccount = 3;
    string actor_id = 4;
    string request_context = 5;
}

message ReadVenueAccountByVenueAccountDetailsResponse {
    VenueAccount venue_account = 1;
} 
