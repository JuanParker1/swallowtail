// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accountproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	/// --- Accounts --- ///
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadAccountResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	PageAccount(ctx context.Context, in *PageAccountRequest, opts ...grpc.CallOption) (*PageAccountResponse, error)
	/// --- Venue Account --- ///
	AddVenueAccount(ctx context.Context, in *AddVenueAccountRequest, opts ...grpc.CallOption) (*AddVenueAccountResponse, error)
	AddTestVenueAccount(ctx context.Context, in *AddTestVenueAccountRequest, opts ...grpc.CallOption) (*AddTestVenueAccountResponse, error)
	ListVenueAccounts(ctx context.Context, in *ListVenueAccountsRequest, opts ...grpc.CallOption) (*ListVenueAccountsResponse, error)
	// TODO: update name to include ID
	ReadVenueAccountByVenueAccountID(ctx context.Context, in *ReadVenueAccountByVenueAccountIDRequest, opts ...grpc.CallOption) (*ReadVenueAccountByVenueAccountIDResponse, error)
	ReadVenueAccountByVenueAccountDetails(ctx context.Context, in *ReadVenueAccountByVenueAccountDetailsRequest, opts ...grpc.CallOption) (*ReadVenueAccountByVenueAccountDetailsResponse, error)
	ReadPrimaryVenueAccountByUserID(ctx context.Context, in *ReadPrimaryVenueAccountByUserIDRequest, opts ...grpc.CallOption) (*ReadPrimaryVenueAccountByUserIDResponse, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/account/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadAccountResponse, error) {
	out := new(ReadAccountResponse)
	err := c.cc.Invoke(ctx, "/account/ReadAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/account/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/account/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PageAccount(ctx context.Context, in *PageAccountRequest, opts ...grpc.CallOption) (*PageAccountResponse, error) {
	out := new(PageAccountResponse)
	err := c.cc.Invoke(ctx, "/account/PageAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AddVenueAccount(ctx context.Context, in *AddVenueAccountRequest, opts ...grpc.CallOption) (*AddVenueAccountResponse, error) {
	out := new(AddVenueAccountResponse)
	err := c.cc.Invoke(ctx, "/account/AddVenueAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AddTestVenueAccount(ctx context.Context, in *AddTestVenueAccountRequest, opts ...grpc.CallOption) (*AddTestVenueAccountResponse, error) {
	out := new(AddTestVenueAccountResponse)
	err := c.cc.Invoke(ctx, "/account/AddTestVenueAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListVenueAccounts(ctx context.Context, in *ListVenueAccountsRequest, opts ...grpc.CallOption) (*ListVenueAccountsResponse, error) {
	out := new(ListVenueAccountsResponse)
	err := c.cc.Invoke(ctx, "/account/ListVenueAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ReadVenueAccountByVenueAccountID(ctx context.Context, in *ReadVenueAccountByVenueAccountIDRequest, opts ...grpc.CallOption) (*ReadVenueAccountByVenueAccountIDResponse, error) {
	out := new(ReadVenueAccountByVenueAccountIDResponse)
	err := c.cc.Invoke(ctx, "/account/ReadVenueAccountByVenueAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ReadVenueAccountByVenueAccountDetails(ctx context.Context, in *ReadVenueAccountByVenueAccountDetailsRequest, opts ...grpc.CallOption) (*ReadVenueAccountByVenueAccountDetailsResponse, error) {
	out := new(ReadVenueAccountByVenueAccountDetailsResponse)
	err := c.cc.Invoke(ctx, "/account/ReadVenueAccountByVenueAccountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ReadPrimaryVenueAccountByUserID(ctx context.Context, in *ReadPrimaryVenueAccountByUserIDRequest, opts ...grpc.CallOption) (*ReadPrimaryVenueAccountByUserIDResponse, error) {
	out := new(ReadPrimaryVenueAccountByUserIDResponse)
	err := c.cc.Invoke(ctx, "/account/ReadPrimaryVenueAccountByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	/// --- Accounts --- ///
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	ReadAccount(context.Context, *ReadAccountRequest) (*ReadAccountResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	PageAccount(context.Context, *PageAccountRequest) (*PageAccountResponse, error)
	/// --- Venue Account --- ///
	AddVenueAccount(context.Context, *AddVenueAccountRequest) (*AddVenueAccountResponse, error)
	AddTestVenueAccount(context.Context, *AddTestVenueAccountRequest) (*AddTestVenueAccountResponse, error)
	ListVenueAccounts(context.Context, *ListVenueAccountsRequest) (*ListVenueAccountsResponse, error)
	// TODO: update name to include ID
	ReadVenueAccountByVenueAccountID(context.Context, *ReadVenueAccountByVenueAccountIDRequest) (*ReadVenueAccountByVenueAccountIDResponse, error)
	ReadVenueAccountByVenueAccountDetails(context.Context, *ReadVenueAccountByVenueAccountDetailsRequest) (*ReadVenueAccountByVenueAccountDetailsResponse, error)
	ReadPrimaryVenueAccountByUserID(context.Context, *ReadPrimaryVenueAccountByUserIDRequest) (*ReadPrimaryVenueAccountByUserIDResponse, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountServer) ReadAccount(context.Context, *ReadAccountRequest) (*ReadAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccount not implemented")
}
func (UnimplementedAccountServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServer) PageAccount(context.Context, *PageAccountRequest) (*PageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageAccount not implemented")
}
func (UnimplementedAccountServer) AddVenueAccount(context.Context, *AddVenueAccountRequest) (*AddVenueAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVenueAccount not implemented")
}
func (UnimplementedAccountServer) AddTestVenueAccount(context.Context, *AddTestVenueAccountRequest) (*AddTestVenueAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestVenueAccount not implemented")
}
func (UnimplementedAccountServer) ListVenueAccounts(context.Context, *ListVenueAccountsRequest) (*ListVenueAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVenueAccounts not implemented")
}
func (UnimplementedAccountServer) ReadVenueAccountByVenueAccountID(context.Context, *ReadVenueAccountByVenueAccountIDRequest) (*ReadVenueAccountByVenueAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVenueAccountByVenueAccountID not implemented")
}
func (UnimplementedAccountServer) ReadVenueAccountByVenueAccountDetails(context.Context, *ReadVenueAccountByVenueAccountDetailsRequest) (*ReadVenueAccountByVenueAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVenueAccountByVenueAccountDetails not implemented")
}
func (UnimplementedAccountServer) ReadPrimaryVenueAccountByUserID(context.Context, *ReadPrimaryVenueAccountByUserIDRequest) (*ReadPrimaryVenueAccountByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPrimaryVenueAccountByUserID not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ReadAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ReadAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ReadAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ReadAccount(ctx, req.(*ReadAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/PageAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PageAccount(ctx, req.(*PageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AddVenueAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVenueAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AddVenueAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/AddVenueAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AddVenueAccount(ctx, req.(*AddVenueAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AddTestVenueAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestVenueAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AddTestVenueAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/AddTestVenueAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AddTestVenueAccount(ctx, req.(*AddTestVenueAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListVenueAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVenueAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListVenueAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ListVenueAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListVenueAccounts(ctx, req.(*ListVenueAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ReadVenueAccountByVenueAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVenueAccountByVenueAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ReadVenueAccountByVenueAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ReadVenueAccountByVenueAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ReadVenueAccountByVenueAccountID(ctx, req.(*ReadVenueAccountByVenueAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ReadVenueAccountByVenueAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVenueAccountByVenueAccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ReadVenueAccountByVenueAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ReadVenueAccountByVenueAccountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ReadVenueAccountByVenueAccountDetails(ctx, req.(*ReadVenueAccountByVenueAccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ReadPrimaryVenueAccountByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPrimaryVenueAccountByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ReadPrimaryVenueAccountByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account/ReadPrimaryVenueAccountByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ReadPrimaryVenueAccountByUserID(ctx, req.(*ReadPrimaryVenueAccountByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _Account_ListAccounts_Handler,
		},
		{
			MethodName: "ReadAccount",
			Handler:    _Account_ReadAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Account_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Account_UpdateAccount_Handler,
		},
		{
			MethodName: "PageAccount",
			Handler:    _Account_PageAccount_Handler,
		},
		{
			MethodName: "AddVenueAccount",
			Handler:    _Account_AddVenueAccount_Handler,
		},
		{
			MethodName: "AddTestVenueAccount",
			Handler:    _Account_AddTestVenueAccount_Handler,
		},
		{
			MethodName: "ListVenueAccounts",
			Handler:    _Account_ListVenueAccounts_Handler,
		},
		{
			MethodName: "ReadVenueAccountByVenueAccountID",
			Handler:    _Account_ReadVenueAccountByVenueAccountID_Handler,
		},
		{
			MethodName: "ReadVenueAccountByVenueAccountDetails",
			Handler:    _Account_ReadVenueAccountByVenueAccountDetails_Handler,
		},
		{
			MethodName: "ReadPrimaryVenueAccountByUserID",
			Handler:    _Account_ReadPrimaryVenueAccountByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.account/proto/account.proto",
}
