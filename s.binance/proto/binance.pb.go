// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: s.binance/proto/binance.proto

package binanceproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TradeSide int32

const (
	TradeSide_BUY  TradeSide = 0
	TradeSide_SELL TradeSide = 1
)

// Enum value maps for TradeSide.
var (
	TradeSide_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TradeSide_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TradeSide) Enum() *TradeSide {
	p := new(TradeSide)
	*p = x
	return p
}

func (x TradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_s_binance_proto_binance_proto_enumTypes[0].Descriptor()
}

func (TradeSide) Type() protoreflect.EnumType {
	return &file_s_binance_proto_binance_proto_enumTypes[0]
}

func (x TradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSide.Descriptor instead.
func (TradeSide) EnumDescriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{0}
}

type TradeType int32

const (
	TradeType_SPOT              TradeType = 0
	TradeType_PERPETUAL_FUTURES TradeType = 1
	TradeType_QUARTERLY_FUTURES TradeType = 2
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "SPOT",
		1: "PERPETUAL_FUTURES",
		2: "QUARTERLY_FUTURES",
	}
	TradeType_value = map[string]int32{
		"SPOT":              0,
		"PERPETUAL_FUTURES": 1,
		"QUARTERLY_FUTURES": 2,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_s_binance_proto_binance_proto_enumTypes[1].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_s_binance_proto_binance_proto_enumTypes[1]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{1}
}

type SpotTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDiscordId     string                 `protobuf:"bytes,1,opt,name=user_discord_id,json=userDiscordId,proto3" json:"user_discord_id,omitempty"`
	IdempotencyKey    string                 `protobuf:"bytes,2,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	Side              TradeSide              `protobuf:"varint,3,opt,name=side,proto3,enum=binanceproto.TradeSide" json:"side,omitempty"`
	AssetPair         string                 `protobuf:"bytes,4,opt,name=asset_pair,json=assetPair,proto3" json:"asset_pair,omitempty"`
	Amount            string                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Value             string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	AttemptRetryUntil *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=attempt_retry_until,json=attemptRetryUntil,proto3" json:"attempt_retry_until,omitempty"`
}

func (x *SpotTradeRequest) Reset() {
	*x = SpotTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeRequest) ProtoMessage() {}

func (x *SpotTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeRequest.ProtoReflect.Descriptor instead.
func (*SpotTradeRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{0}
}

func (x *SpotTradeRequest) GetUserDiscordId() string {
	if x != nil {
		return x.UserDiscordId
	}
	return ""
}

func (x *SpotTradeRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *SpotTradeRequest) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_BUY
}

func (x *SpotTradeRequest) GetAssetPair() string {
	if x != nil {
		return x.AssetPair
	}
	return ""
}

func (x *SpotTradeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SpotTradeRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SpotTradeRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SpotTradeRequest) GetAttemptRetryUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.AttemptRetryUntil
	}
	return nil
}

type SpotTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executed bool   `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
	TradeId  string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
}

func (x *SpotTradeResponse) Reset() {
	*x = SpotTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeResponse) ProtoMessage() {}

func (x *SpotTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeResponse.ProtoReflect.Descriptor instead.
func (*SpotTradeResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{1}
}

func (x *SpotTradeResponse) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

func (x *SpotTradeResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type PerpetualFutureTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDiscordId     string                 `protobuf:"bytes,1,opt,name=user_discord_id,json=userDiscordId,proto3" json:"user_discord_id,omitempty"`
	IdempotencyKey    string                 `protobuf:"bytes,2,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	Side              TradeSide              `protobuf:"varint,3,opt,name=side,proto3,enum=binanceproto.TradeSide" json:"side,omitempty"`
	AssetPair         string                 `protobuf:"bytes,4,opt,name=asset_pair,json=assetPair,proto3" json:"asset_pair,omitempty"`
	Amount            string                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Value             string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	AttemptRetryUntil *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=attempt_retry_until,json=attemptRetryUntil,proto3" json:"attempt_retry_until,omitempty"`
}

func (x *PerpetualFutureTradeRequest) Reset() {
	*x = PerpetualFutureTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerpetualFutureTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualFutureTradeRequest) ProtoMessage() {}

func (x *PerpetualFutureTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerpetualFutureTradeRequest.ProtoReflect.Descriptor instead.
func (*PerpetualFutureTradeRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{2}
}

func (x *PerpetualFutureTradeRequest) GetUserDiscordId() string {
	if x != nil {
		return x.UserDiscordId
	}
	return ""
}

func (x *PerpetualFutureTradeRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *PerpetualFutureTradeRequest) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_BUY
}

func (x *PerpetualFutureTradeRequest) GetAssetPair() string {
	if x != nil {
		return x.AssetPair
	}
	return ""
}

func (x *PerpetualFutureTradeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PerpetualFutureTradeRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PerpetualFutureTradeRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PerpetualFutureTradeRequest) GetAttemptRetryUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.AttemptRetryUntil
	}
	return nil
}

type PerpetualFutureTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PerpetualFutureTradeResponse) Reset() {
	*x = PerpetualFutureTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerpetualFutureTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualFutureTradeResponse) ProtoMessage() {}

func (x *PerpetualFutureTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerpetualFutureTradeResponse.ProtoReflect.Descriptor instead.
func (*PerpetualFutureTradeResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{3}
}

var File_s_binance_proto_binance_proto protoreflect.FileDescriptor

var file_s_binance_proto_binance_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf,
	0x02, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x22, 0x4a, 0x0a, 0x11, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a,
	0x1b, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x13, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x65, 0x72,
	0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x1e, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x50, 0x45, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x41, 0x52, 0x54,
	0x45, 0x52, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x02, 0x32, 0xca,
	0x01, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x50, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e,
	0x2f, 0x3b, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_s_binance_proto_binance_proto_rawDescOnce sync.Once
	file_s_binance_proto_binance_proto_rawDescData = file_s_binance_proto_binance_proto_rawDesc
)

func file_s_binance_proto_binance_proto_rawDescGZIP() []byte {
	file_s_binance_proto_binance_proto_rawDescOnce.Do(func() {
		file_s_binance_proto_binance_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_binance_proto_binance_proto_rawDescData)
	})
	return file_s_binance_proto_binance_proto_rawDescData
}

var file_s_binance_proto_binance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_s_binance_proto_binance_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_s_binance_proto_binance_proto_goTypes = []interface{}{
	(TradeSide)(0),                       // 0: binanceproto.TradeSide
	(TradeType)(0),                       // 1: binanceproto.TradeType
	(*SpotTradeRequest)(nil),             // 2: binanceproto.SpotTradeRequest
	(*SpotTradeResponse)(nil),            // 3: binanceproto.SpotTradeResponse
	(*PerpetualFutureTradeRequest)(nil),  // 4: binanceproto.PerpetualFutureTradeRequest
	(*PerpetualFutureTradeResponse)(nil), // 5: binanceproto.PerpetualFutureTradeResponse
	(*timestamppb.Timestamp)(nil),        // 6: google.protobuf.Timestamp
}
var file_s_binance_proto_binance_proto_depIdxs = []int32{
	0, // 0: binanceproto.SpotTradeRequest.side:type_name -> binanceproto.TradeSide
	6, // 1: binanceproto.SpotTradeRequest.created:type_name -> google.protobuf.Timestamp
	6, // 2: binanceproto.SpotTradeRequest.attempt_retry_until:type_name -> google.protobuf.Timestamp
	0, // 3: binanceproto.PerpetualFutureTradeRequest.side:type_name -> binanceproto.TradeSide
	6, // 4: binanceproto.PerpetualFutureTradeRequest.created:type_name -> google.protobuf.Timestamp
	6, // 5: binanceproto.PerpetualFutureTradeRequest.attempt_retry_until:type_name -> google.protobuf.Timestamp
	2, // 6: binanceproto.binance.SpotTrade:input_type -> binanceproto.SpotTradeRequest
	4, // 7: binanceproto.binance.PerpetualFutureTrade:input_type -> binanceproto.PerpetualFutureTradeRequest
	3, // 8: binanceproto.binance.SpotTrade:output_type -> binanceproto.SpotTradeResponse
	5, // 9: binanceproto.binance.PerpetualFutureTrade:output_type -> binanceproto.PerpetualFutureTradeResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_s_binance_proto_binance_proto_init() }
func file_s_binance_proto_binance_proto_init() {
	if File_s_binance_proto_binance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_binance_proto_binance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerpetualFutureTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerpetualFutureTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_binance_proto_binance_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_binance_proto_binance_proto_goTypes,
		DependencyIndexes: file_s_binance_proto_binance_proto_depIdxs,
		EnumInfos:         file_s_binance_proto_binance_proto_enumTypes,
		MessageInfos:      file_s_binance_proto_binance_proto_msgTypes,
	}.Build()
	File_s_binance_proto_binance_proto = out.File
	file_s_binance_proto_binance_proto_rawDesc = nil
	file_s_binance_proto_binance_proto_goTypes = nil
	file_s_binance_proto_binance_proto_depIdxs = nil
}
