// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: s.binance/proto/binance.proto

package binanceproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AssetPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol            string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	BaseAsset         string `protobuf:"bytes,2,opt,name=base_asset,json=baseAsset,proto3" json:"base_asset,omitempty"`
	QuoteAsset        string `protobuf:"bytes,3,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`
	WithSpotTrading   bool   `protobuf:"varint,4,opt,name=with_spot_trading,json=withSpotTrading,proto3" json:"with_spot_trading,omitempty"`
	WithMarginTrading bool   `protobuf:"varint,5,opt,name=with_margin_trading,json=withMarginTrading,proto3" json:"with_margin_trading,omitempty"`
}

func (x *AssetPair) Reset() {
	*x = AssetPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPair) ProtoMessage() {}

func (x *AssetPair) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPair.ProtoReflect.Descriptor instead.
func (*AssetPair) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{0}
}

func (x *AssetPair) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AssetPair) GetBaseAsset() string {
	if x != nil {
		return x.BaseAsset
	}
	return ""
}

func (x *AssetPair) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

func (x *AssetPair) GetWithSpotTrading() bool {
	if x != nil {
		return x.WithSpotTrading
	}
	return false
}

func (x *AssetPair) GetWithMarginTrading() bool {
	if x != nil {
		return x.WithMarginTrading
	}
	return false
}

type ListAllAssetPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAllAssetPairsRequest) Reset() {
	*x = ListAllAssetPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllAssetPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllAssetPairsRequest) ProtoMessage() {}

func (x *ListAllAssetPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllAssetPairsRequest.ProtoReflect.Descriptor instead.
func (*ListAllAssetPairsRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{1}
}

type ListAllAssetPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPairs []*AssetPair `protobuf:"bytes,1,rep,name=asset_pairs,json=assetPairs,proto3" json:"asset_pairs,omitempty"`
}

func (x *ListAllAssetPairsResponse) Reset() {
	*x = ListAllAssetPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllAssetPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllAssetPairsResponse) ProtoMessage() {}

func (x *ListAllAssetPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllAssetPairsResponse.ProtoReflect.Descriptor instead.
func (*ListAllAssetPairsResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{2}
}

func (x *ListAllAssetPairsResponse) GetAssetPairs() []*AssetPair {
	if x != nil {
		return x.AssetPairs
	}
	return nil
}

type ExecuteFuturesPerpetualsTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	ActorId string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// TODO
	TradeSide   string                 `protobuf:"bytes,3,opt,name=TradeSide,proto3" json:"TradeSide,omitempty"`
	Asset       string                 `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	Pair        string                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Entry       float32                `protobuf:"fixed32,6,opt,name=entry,proto3" json:"entry,omitempty"`
	StopLoss    float32                `protobuf:"fixed32,7,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	TakeProfits []float32              `protobuf:"fixed32,8,rep,packed,name=take_profits,json=takeProfits,proto3" json:"take_profits,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ExecuteFuturesPerpetualsTradeRequest) Reset() {
	*x = ExecuteFuturesPerpetualsTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFuturesPerpetualsTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFuturesPerpetualsTradeRequest) ProtoMessage() {}

func (x *ExecuteFuturesPerpetualsTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFuturesPerpetualsTradeRequest.ProtoReflect.Descriptor instead.
func (*ExecuteFuturesPerpetualsTradeRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetTradeSide() string {
	if x != nil {
		return x.TradeSide
	}
	return ""
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetEntry() float32 {
	if x != nil {
		return x.Entry
	}
	return 0
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetTakeProfits() []float32 {
	if x != nil {
		return x.TakeProfits
	}
	return nil
}

func (x *ExecuteFuturesPerpetualsTradeRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ExecuteFuturesPerpetualsTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteFuturesPerpetualsTradeResponse) Reset() {
	*x = ExecuteFuturesPerpetualsTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFuturesPerpetualsTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFuturesPerpetualsTradeResponse) ProtoMessage() {}

func (x *ExecuteFuturesPerpetualsTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFuturesPerpetualsTradeResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFuturesPerpetualsTradeResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{4}
}

type ReadPerpetualFuturesAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId     string       `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Credentials *Credentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ReadPerpetualFuturesAccountRequest) Reset() {
	*x = ReadPerpetualFuturesAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPerpetualFuturesAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPerpetualFuturesAccountRequest) ProtoMessage() {}

func (x *ReadPerpetualFuturesAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPerpetualFuturesAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadPerpetualFuturesAccountRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{5}
}

func (x *ReadPerpetualFuturesAccountRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ReadPerpetualFuturesAccountRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ReadPerpetualFuturesAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset            string                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Balance          float32                `protobuf:"fixed32,2,opt,name=balance,proto3" json:"balance,omitempty"`
	AvailableBalance float32                `protobuf:"fixed32,3,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	LastUpdated      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *ReadPerpetualFuturesAccountResponse) Reset() {
	*x = ReadPerpetualFuturesAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPerpetualFuturesAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPerpetualFuturesAccountResponse) ProtoMessage() {}

func (x *ReadPerpetualFuturesAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPerpetualFuturesAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadPerpetualFuturesAccountResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{6}
}

func (x *ReadPerpetualFuturesAccountResponse) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ReadPerpetualFuturesAccountResponse) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ReadPerpetualFuturesAccountResponse) GetAvailableBalance() float32 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *ReadPerpetualFuturesAccountResponse) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type GetLatestPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetLatestPriceRequest) Reset() {
	*x = GetLatestPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPriceRequest) ProtoMessage() {}

func (x *GetLatestPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPriceRequest.ProtoReflect.Descriptor instead.
func (*GetLatestPriceRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{7}
}

func (x *GetLatestPriceRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetLatestPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     float32 `protobuf:"fixed32,1,opt,name=price,proto3" json:"price,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetLatestPriceResponse) Reset() {
	*x = GetLatestPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPriceResponse) ProtoMessage() {}

func (x *GetLatestPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPriceResponse.ProtoReflect.Descriptor instead.
func (*GetLatestPriceResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{8}
}

func (x *GetLatestPriceResponse) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetLatestPriceResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey    string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{9}
}

func (x *Credentials) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Credentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type VerifyCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials *Credentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	UserId      string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *VerifyCredentialsRequest) Reset() {
	*x = VerifyCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCredentialsRequest) ProtoMessage() {}

func (x *VerifyCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCredentialsRequest.ProtoReflect.Descriptor instead.
func (*VerifyCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyCredentialsRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *VerifyCredentialsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type VerifyCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ReadEnabled     bool   `protobuf:"varint,2,opt,name=read_enabled,json=readEnabled,proto3" json:"read_enabled,omitempty"`
	FuturesEnabled  bool   `protobuf:"varint,3,opt,name=futures_enabled,json=futuresEnabled,proto3" json:"futures_enabled,omitempty"`
	WithdrawEnabled bool   `protobuf:"varint,4,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	SpotEnabled     bool   `protobuf:"varint,5,opt,name=spot_enabled,json=spotEnabled,proto3" json:"spot_enabled,omitempty"`
	OptionsEnabled  bool   `protobuf:"varint,6,opt,name=options_enabled,json=optionsEnabled,proto3" json:"options_enabled,omitempty"`
	IpRestrictions  bool   `protobuf:"varint,7,opt,name=ip_restrictions,json=ipRestrictions,proto3" json:"ip_restrictions,omitempty"`
	Reason          string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *VerifyCredentialsResponse) Reset() {
	*x = VerifyCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCredentialsResponse) ProtoMessage() {}

func (x *VerifyCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCredentialsResponse.ProtoReflect.Descriptor instead.
func (*VerifyCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyCredentialsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VerifyCredentialsResponse) GetReadEnabled() bool {
	if x != nil {
		return x.ReadEnabled
	}
	return false
}

func (x *VerifyCredentialsResponse) GetFuturesEnabled() bool {
	if x != nil {
		return x.FuturesEnabled
	}
	return false
}

func (x *VerifyCredentialsResponse) GetWithdrawEnabled() bool {
	if x != nil {
		return x.WithdrawEnabled
	}
	return false
}

func (x *VerifyCredentialsResponse) GetSpotEnabled() bool {
	if x != nil {
		return x.SpotEnabled
	}
	return false
}

func (x *VerifyCredentialsResponse) GetOptionsEnabled() bool {
	if x != nil {
		return x.OptionsEnabled
	}
	return false
}

func (x *VerifyCredentialsResponse) GetIpRestrictions() bool {
	if x != nil {
		return x.IpRestrictions
	}
	return false
}

func (x *VerifyCredentialsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{12}
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time recorded by the server on Binances side.
	ServerTime int64 `protobuf:"varint,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	// The time it took to receive the request response
	RequestLatency int64 `protobuf:"varint,2,opt,name=request_latency,json=requestLatency,proto3" json:"request_latency,omitempty"`
	// The assumed clock drift between the client & the server time
	AssumedClockDrift int64 `protobuf:"varint,3,opt,name=assumed_clock_drift,json=assumedClockDrift,proto3" json:"assumed_clock_drift,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_binance_proto_binance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_binance_proto_binance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_s_binance_proto_binance_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatusResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *GetStatusResponse) GetRequestLatency() int64 {
	if x != nil {
		return x.RequestLatency
	}
	return 0
}

func (x *GetStatusResponse) GetAssumedClockDrift() int64 {
	if x != nil {
		return x.AssumedClockDrift
	}
	return 0
}

var File_s_binance_proto_binance_proto protoreflect.FileDescriptor

var file_s_binance_proto_binance_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbf, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x24, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x70, 0x65,
	0x74, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x27, 0x0a, 0x25, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x64,
	0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x23, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4c,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x45, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x70, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x66, 0x74, 0x32, 0xfe, 0x03, 0x0a, 0x07, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x70, 0x65,
	0x74, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1b, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x3b,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_s_binance_proto_binance_proto_rawDescOnce sync.Once
	file_s_binance_proto_binance_proto_rawDescData = file_s_binance_proto_binance_proto_rawDesc
)

func file_s_binance_proto_binance_proto_rawDescGZIP() []byte {
	file_s_binance_proto_binance_proto_rawDescOnce.Do(func() {
		file_s_binance_proto_binance_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_binance_proto_binance_proto_rawDescData)
	})
	return file_s_binance_proto_binance_proto_rawDescData
}

var file_s_binance_proto_binance_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_s_binance_proto_binance_proto_goTypes = []interface{}{
	(*AssetPair)(nil),                             // 0: AssetPair
	(*ListAllAssetPairsRequest)(nil),              // 1: ListAllAssetPairsRequest
	(*ListAllAssetPairsResponse)(nil),             // 2: ListAllAssetPairsResponse
	(*ExecuteFuturesPerpetualsTradeRequest)(nil),  // 3: ExecuteFuturesPerpetualsTradeRequest
	(*ExecuteFuturesPerpetualsTradeResponse)(nil), // 4: ExecuteFuturesPerpetualsTradeResponse
	(*ReadPerpetualFuturesAccountRequest)(nil),    // 5: ReadPerpetualFuturesAccountRequest
	(*ReadPerpetualFuturesAccountResponse)(nil),   // 6: ReadPerpetualFuturesAccountResponse
	(*GetLatestPriceRequest)(nil),                 // 7: GetLatestPriceRequest
	(*GetLatestPriceResponse)(nil),                // 8: GetLatestPriceResponse
	(*Credentials)(nil),                           // 9: Credentials
	(*VerifyCredentialsRequest)(nil),              // 10: VerifyCredentialsRequest
	(*VerifyCredentialsResponse)(nil),             // 11: VerifyCredentialsResponse
	(*GetStatusRequest)(nil),                      // 12: GetStatusRequest
	(*GetStatusResponse)(nil),                     // 13: GetStatusResponse
	(*timestamppb.Timestamp)(nil),                 // 14: google.protobuf.Timestamp
}
var file_s_binance_proto_binance_proto_depIdxs = []int32{
	0,  // 0: ListAllAssetPairsResponse.asset_pairs:type_name -> AssetPair
	14, // 1: ExecuteFuturesPerpetualsTradeRequest.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 2: ReadPerpetualFuturesAccountRequest.credentials:type_name -> Credentials
	14, // 3: ReadPerpetualFuturesAccountResponse.last_updated:type_name -> google.protobuf.Timestamp
	9,  // 4: VerifyCredentialsRequest.credentials:type_name -> Credentials
	1,  // 5: binance.ListAllAssetPairs:input_type -> ListAllAssetPairsRequest
	3,  // 6: binance.ExecuteFuturesPerpetualsTrade:input_type -> ExecuteFuturesPerpetualsTradeRequest
	7,  // 7: binance.GetLatestPrice:input_type -> GetLatestPriceRequest
	5,  // 8: binance.ReadPerpetualFuturesAccount:input_type -> ReadPerpetualFuturesAccountRequest
	10, // 9: binance.VerifyCredentials:input_type -> VerifyCredentialsRequest
	12, // 10: binance.GetStatus:input_type -> GetStatusRequest
	2,  // 11: binance.ListAllAssetPairs:output_type -> ListAllAssetPairsResponse
	4,  // 12: binance.ExecuteFuturesPerpetualsTrade:output_type -> ExecuteFuturesPerpetualsTradeResponse
	8,  // 13: binance.GetLatestPrice:output_type -> GetLatestPriceResponse
	6,  // 14: binance.ReadPerpetualFuturesAccount:output_type -> ReadPerpetualFuturesAccountResponse
	11, // 15: binance.VerifyCredentials:output_type -> VerifyCredentialsResponse
	13, // 16: binance.GetStatus:output_type -> GetStatusResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_s_binance_proto_binance_proto_init() }
func file_s_binance_proto_binance_proto_init() {
	if File_s_binance_proto_binance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_binance_proto_binance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllAssetPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllAssetPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFuturesPerpetualsTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFuturesPerpetualsTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPerpetualFuturesAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPerpetualFuturesAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_binance_proto_binance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_binance_proto_binance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_binance_proto_binance_proto_goTypes,
		DependencyIndexes: file_s_binance_proto_binance_proto_depIdxs,
		MessageInfos:      file_s_binance_proto_binance_proto_msgTypes,
	}.Build()
	File_s_binance_proto_binance_proto = out.File
	file_s_binance_proto_binance_proto_rawDesc = nil
	file_s_binance_proto_binance_proto_goTypes = nil
	file_s_binance_proto_binance_proto_depIdxs = nil
}
