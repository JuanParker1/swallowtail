syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "./;binanceproto";

service binance {
    rpc ListAllAssetPairs (ListAllAssetPairsRequest) returns (ListAllAssetPairsResponse) {}

    rpc ExecuteFuturesPerpetualsTrade (ExecuteFuturesPerpetualsTradeRequest) returns (ExecuteFuturesPerpetualsTradeResponse) {}

    rpc GetLatestPrice (GetLatestPriceRequest) returns (GetLatestPriceResponse) {}

    rpc ReadPerpetualFuturesAccount (ReadPerpetualFuturesAccountRequest) returns (ReadPerpetualFuturesAccountResponse) {}

    rpc GetFundingRate (GetFundingRateRequest) returns (GetFundingRateResponse) {}

    rpc VerifyCredentials (VerifyCredentialsRequest) returns (VerifyCredentialsResponse) {}

    rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {}
}

enum BinanceOrderType {
    BINANCE_LIMIT = 0;
    BINANCE_MARKET = 1;
    BINANCE_STOP = 2;
    BINANCE_TAKE_PROFIT = 3;
    BINANCE_STOP_MARKET = 4;
    BINANCE_TAKE_PROFIT_MARKET = 5;
}

enum BinanceTradeSide {
    BINANCE_BUY = 0;
    BINANCE_SELL = 1;
}

enum BinanceTimeInForce {
    BINANCE_NOT_REQUIRED = 0;
    BINANCE_GTC = 1;
    BINANCE_IOC = 2;
    BINANCE_FOK = 3;
    BINANCE_GTX = 4;
}

enum BinanceWorkingType {
    BINANCE_CONTRACT_PRICE = 0;
    BINANCE_MARK_PRICE = 1;
}

enum BinancePositionSide {
    BINANCE_SIDE_BOTH = 0;
    BINANCE_SIDE_LONG = 1;
    BINANCE_SIDE_SHORT = 2;
}

message PerpetualFuturesOrder {
    BinanceTradeSide side = 1;
    BinanceOrderType order_type = 2;
    float quantity = 3;
    string symbol = 4;
    string pair = 5;
    float price = 6;
    float stop_price = 7;
    BinanceTimeInForce time_in_force = 8;
    BinanceWorkingType working_type = 9;
    bool close_position = 10;
    BinancePositionSide position_side = 11;
    bool reduce_only = 12;
}

message AssetPair {
    string symbol = 1;
    string base_asset = 2;
    string quote_asset = 3;
    bool with_spot_trading = 4;
    bool with_margin_trading = 5;
}

message ListAllAssetPairsRequest {}

message ListAllAssetPairsResponse {
    repeated AssetPair asset_pairs = 1;
}

message ExecuteFuturesPerpetualsTradeRequest {
    repeated PerpetualFuturesOrder orders = 1;
    google.protobuf.Timestamp timestamp = 2;
    Credentials credentials = 3;
}

message ExecuteFuturesPerpetualsTradeResponse {
    string exchange_trade_id = 1;
    int64 timestamp = 2;
    int64 number_of_orders_executed = 3;
}

message ReadPerpetualFuturesAccountRequest {
    string actor_id = 1;
    Credentials credentials = 2;
}

message ReadPerpetualFuturesAccountResponse {
    string asset = 1;
    float balance = 2;
    float available_balance = 3;
    google.protobuf.Timestamp last_updated = 4;
}

message GetLatestPriceRequest{
    string symbol = 1;
}

message GetLatestPriceResponse{
    float price = 1;
    int64 timestamp = 2;
}

message GetFundingRateRequest {
    string symbol = 1;
    int64 start_time = 2;
    int64 end_time = 3;
}

message FundingRateInfo {
    string symbol = 1;
    float funding_rate = 2;
    float funding_rate_time = 3;
}

message GetFundingRateResponse {
    repeated FundingRateInfo funding_rates = 1;
}

message Credentials {
    string api_key = 1;
    string secret_key = 2;
}

message VerifyCredentialsRequest {
    Credentials credentials = 1;
    string user_id = 2;
}

message VerifyCredentialsResponse {
    bool success = 1;
    bool read_enabled = 2;
    bool futures_enabled = 3;
    bool withdraw_enabled = 4;
    bool spot_enabled = 5;
    bool options_enabled = 6;
    bool ip_restrictions = 7;
    string reason = 8;
}

message GetStatusRequest {}

message GetStatusResponse {
    // The time recorded by the server on Binances side.
    int64 server_time = 1;
    // The time it took to receive the request response
    int64 request_latency = 2;
    // The assumed clock drift between the client & the server time
    int64 assumed_clock_drift = 3;
}
