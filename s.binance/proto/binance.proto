syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "s.trade-engine/proto/tradeengine.proto";

option go_package = "swallowtail/s.binance/proto;binanceproto";

service binance {
    rpc ListAllAssetPairs (ListAllAssetPairsRequest) returns (ListAllAssetPairsResponse) {}

    rpc ExecuteNewFuturesPerpetualOrder (ExecuteNewFuturesPerpetualOrderRequest) returns (ExecuteNewFuturesPerpetualOrderResponse) {}

    rpc GetLatestPrice (GetLatestPriceRequest) returns (GetLatestPriceResponse) {}

    rpc ReadPerpetualFuturesAccount (ReadPerpetualFuturesAccountRequest) returns (ReadPerpetualFuturesAccountResponse) {}

    rpc GetFundingRates (GetFundingRatesRequest) returns (GetFundingRatesResponse) {}

    rpc VerifyCredentials (VerifyCredentialsRequest) returns (VerifyCredentialsResponse) {}

    rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {}
}

message AssetPair {
    string symbol = 1;
    string base_asset = 2;
    string quote_asset = 3;
    bool with_spot_trading = 4;
    bool with_margin_trading = 5;
}

message ListAllAssetPairsRequest {}

message ListAllAssetPairsResponse {
    repeated AssetPair asset_pairs = 1;
}

message ExecuteNewFuturesPerpetualOrderRequest {
    Order order = 1;
    google.protobuf.Timestamp timestamp = 2;
    VenueCredentials credentials = 3;
}

message ExecuteNewFuturesPerpetualOrderResponse {
    Order order = 1;
}

message ReadPerpetualFuturesAccountRequest {
    string actor_id = 1;
    VenueCredentials credentials = 2;
}

message ReadPerpetualFuturesAccountResponse {
    string asset = 1;
    float balance = 2;
    float available_balance = 3;
    google.protobuf.Timestamp last_updated = 4;
}

message GetLatestPriceRequest{
    string symbol = 1;
}

message GetLatestPriceResponse{
    float price = 1;
    int64 timestamp = 2;
}

message GetFundingRatesRequest {
    string symbol = 1;
    int64 start_time = 2;
    int64 end_time = 3;
    int64 limit = 4;
}

message FundingRateInfo {
    string symbol = 1;
    float funding_rate = 2;
    float funding_rate_time = 3;
}

message GetFundingRatesResponse {
    repeated FundingRateInfo funding_rates = 1;
}

message VerifyCredentialsRequest {
    VenueCredentials credentials = 1;
    string user_id = 2;
}

message VerifyCredentialsResponse {
    bool success = 1;
    bool read_enabled = 2;
    bool futures_enabled = 3;
    bool withdraw_enabled = 4;
    bool spot_enabled = 5;
    bool options_enabled = 6;
    bool ip_restrictions = 7;
    string reason = 8;
}

message GetStatusRequest {}

message GetStatusResponse {
    // The time recorded by the server on Binances side.
    int64 server_time = 1;
    // The time it took to receive the request response
    int64 request_latency = 2;
    // The assumed clock drift between the client & the server time
    int64 assumed_clock_drift = 3;
}
