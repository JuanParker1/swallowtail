// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package binanceproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BinanceClient is the client API for Binance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceClient interface {
	SpotTrade(ctx context.Context, in *SpotTradeRequest, opts ...grpc.CallOption) (*SpotTradeResponse, error)
	PerpetualFutureTrade(ctx context.Context, in *PerpetualFutureTradeRequest, opts ...grpc.CallOption) (*PerpetualFutureTradeResponse, error)
}

type binanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceClient(cc grpc.ClientConnInterface) BinanceClient {
	return &binanceClient{cc}
}

func (c *binanceClient) SpotTrade(ctx context.Context, in *SpotTradeRequest, opts ...grpc.CallOption) (*SpotTradeResponse, error) {
	out := new(SpotTradeResponse)
	err := c.cc.Invoke(ctx, "/binanceproto.binance/SpotTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceClient) PerpetualFutureTrade(ctx context.Context, in *PerpetualFutureTradeRequest, opts ...grpc.CallOption) (*PerpetualFutureTradeResponse, error) {
	out := new(PerpetualFutureTradeResponse)
	err := c.cc.Invoke(ctx, "/binanceproto.binance/PerpetualFutureTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceServer is the server API for Binance service.
// All implementations must embed UnimplementedBinanceServer
// for forward compatibility
type BinanceServer interface {
	SpotTrade(context.Context, *SpotTradeRequest) (*SpotTradeResponse, error)
	PerpetualFutureTrade(context.Context, *PerpetualFutureTradeRequest) (*PerpetualFutureTradeResponse, error)
	mustEmbedUnimplementedBinanceServer()
}

// UnimplementedBinanceServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServer struct {
}

func (*UnimplementedBinanceServer) SpotTrade(context.Context, *SpotTradeRequest) (*SpotTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotTrade not implemented")
}
func (*UnimplementedBinanceServer) PerpetualFutureTrade(context.Context, *PerpetualFutureTradeRequest) (*PerpetualFutureTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualFutureTrade not implemented")
}
func (*UnimplementedBinanceServer) mustEmbedUnimplementedBinanceServer() {}

func RegisterBinanceServer(s *grpc.Server, srv BinanceServer) {
	s.RegisterService(&_Binance_serviceDesc, srv)
}

func _Binance_SpotTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).SpotTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binanceproto.binance/SpotTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).SpotTrade(ctx, req.(*SpotTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binance_PerpetualFutureTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerpetualFutureTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).PerpetualFutureTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binanceproto.binance/PerpetualFutureTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).PerpetualFutureTrade(ctx, req.(*PerpetualFutureTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Binance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binanceproto.binance",
	HandlerType: (*BinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpotTrade",
			Handler:    _Binance_SpotTrade_Handler,
		},
		{
			MethodName: "PerpetualFutureTrade",
			Handler:    _Binance_PerpetualFutureTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.binance/proto/binance.proto",
}
