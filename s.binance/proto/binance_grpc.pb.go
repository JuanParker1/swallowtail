// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package binanceproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BinanceClient is the client API for Binance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceClient interface {
	ListAllAssetPairs(ctx context.Context, in *ListAllAssetPairsRequest, opts ...grpc.CallOption) (*ListAllAssetPairsResponse, error)
	ExecuteFuturesPerpetualsTrade(ctx context.Context, in *ExecuteFuturesPerpetualsTradeRequest, opts ...grpc.CallOption) (*ExecuteFuturesPerpetualsTradeResponse, error)
	VerifyCredentials(ctx context.Context, in *VerifyCredentialsRequest, opts ...grpc.CallOption) (*VerifyCredentialsResponse, error)
}

type binanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceClient(cc grpc.ClientConnInterface) BinanceClient {
	return &binanceClient{cc}
}

func (c *binanceClient) ListAllAssetPairs(ctx context.Context, in *ListAllAssetPairsRequest, opts ...grpc.CallOption) (*ListAllAssetPairsResponse, error) {
	out := new(ListAllAssetPairsResponse)
	err := c.cc.Invoke(ctx, "/binance/ListAllAssetPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceClient) ExecuteFuturesPerpetualsTrade(ctx context.Context, in *ExecuteFuturesPerpetualsTradeRequest, opts ...grpc.CallOption) (*ExecuteFuturesPerpetualsTradeResponse, error) {
	out := new(ExecuteFuturesPerpetualsTradeResponse)
	err := c.cc.Invoke(ctx, "/binance/ExecuteFuturesPerpetualsTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceClient) VerifyCredentials(ctx context.Context, in *VerifyCredentialsRequest, opts ...grpc.CallOption) (*VerifyCredentialsResponse, error) {
	out := new(VerifyCredentialsResponse)
	err := c.cc.Invoke(ctx, "/binance/VerifyCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceServer is the server API for Binance service.
// All implementations must embed UnimplementedBinanceServer
// for forward compatibility
type BinanceServer interface {
	ListAllAssetPairs(context.Context, *ListAllAssetPairsRequest) (*ListAllAssetPairsResponse, error)
	ExecuteFuturesPerpetualsTrade(context.Context, *ExecuteFuturesPerpetualsTradeRequest) (*ExecuteFuturesPerpetualsTradeResponse, error)
	VerifyCredentials(context.Context, *VerifyCredentialsRequest) (*VerifyCredentialsResponse, error)
	mustEmbedUnimplementedBinanceServer()
}

// UnimplementedBinanceServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServer struct {
}

func (*UnimplementedBinanceServer) ListAllAssetPairs(context.Context, *ListAllAssetPairsRequest) (*ListAllAssetPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAssetPairs not implemented")
}
func (*UnimplementedBinanceServer) ExecuteFuturesPerpetualsTrade(context.Context, *ExecuteFuturesPerpetualsTradeRequest) (*ExecuteFuturesPerpetualsTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFuturesPerpetualsTrade not implemented")
}
func (*UnimplementedBinanceServer) VerifyCredentials(context.Context, *VerifyCredentialsRequest) (*VerifyCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCredentials not implemented")
}
func (*UnimplementedBinanceServer) mustEmbedUnimplementedBinanceServer() {}

func RegisterBinanceServer(s *grpc.Server, srv BinanceServer) {
	s.RegisterService(&_Binance_serviceDesc, srv)
}

func _Binance_ListAllAssetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllAssetPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).ListAllAssetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance/ListAllAssetPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).ListAllAssetPairs(ctx, req.(*ListAllAssetPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binance_ExecuteFuturesPerpetualsTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteFuturesPerpetualsTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).ExecuteFuturesPerpetualsTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance/ExecuteFuturesPerpetualsTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).ExecuteFuturesPerpetualsTrade(ctx, req.(*ExecuteFuturesPerpetualsTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binance_VerifyCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).VerifyCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binance/VerifyCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).VerifyCredentials(ctx, req.(*VerifyCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Binance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binance",
	HandlerType: (*BinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllAssetPairs",
			Handler:    _Binance_ListAllAssetPairs_Handler,
		},
		{
			MethodName: "ExecuteFuturesPerpetualsTrade",
			Handler:    _Binance_ExecuteFuturesPerpetualsTrade_Handler,
		},
		{
			MethodName: "VerifyCredentials",
			Handler:    _Binance_VerifyCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.binance/proto/binance.proto",
}
