// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	clients "swallowtail/s.coingecko/clients"

	mock "github.com/stretchr/testify/mock"
)

// CoinGeckoClient is an autogenerated mock type for the CoinGeckoClient type
type CoinGeckoClient struct {
	mock.Mock
}

// GetATHFromID provides a mock function with given fields: ctx, id
func (_m *CoinGeckoClient) GetATHFromID(ctx context.Context, id string) (float64, error) {
	ret := _m.Called(ctx, id)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetATHFromSymbol provides a mock function with given fields: ctx, symbol
func (_m *CoinGeckoClient) GetATHFromSymbol(ctx context.Context, symbol string) (float64, error) {
	ret := _m.Called(ctx, symbol)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCoinIDs provides a mock function with given fields: ctx
func (_m *CoinGeckoClient) GetAllCoinIDs(ctx context.Context) ([]*clients.CoingeckoListCoinItem, error) {
	ret := _m.Called(ctx)

	var r0 []*clients.CoingeckoListCoinItem
	if rf, ok := ret.Get(0).(func(context.Context) []*clients.CoingeckoListCoinItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clients.CoingeckoListCoinItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentPriceFromID provides a mock function with given fields: ctx, id, assetPair
func (_m *CoinGeckoClient) GetCurrentPriceFromID(ctx context.Context, id string, assetPair string) (float64, error) {
	ret := _m.Called(ctx, id, assetPair)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, id, assetPair)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, assetPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentPriceFromSymbol provides a mock function with given fields: ctx, symbol, assetPair
func (_m *CoinGeckoClient) GetCurrentPriceFromSymbol(ctx context.Context, symbol string, assetPair string) (float64, error) {
	ret := _m.Called(ctx, symbol, assetPair)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, symbol, assetPair)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, symbol, assetPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *CoinGeckoClient) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
