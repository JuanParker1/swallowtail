// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: s.ftx/proto/ftx.proto

package ftxproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	proto "swallowtail/s.trade-engine/proto"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FTX_SIDE int32

const (
	FTX_SIDE_FTX_SIDE_BUY  FTX_SIDE = 0
	FTX_SIDE_FTX_SIDE_SELL FTX_SIDE = 1
)

// Enum value maps for FTX_SIDE.
var (
	FTX_SIDE_name = map[int32]string{
		0: "FTX_SIDE_BUY",
		1: "FTX_SIDE_SELL",
	}
	FTX_SIDE_value = map[string]int32{
		"FTX_SIDE_BUY":  0,
		"FTX_SIDE_SELL": 1,
	}
)

func (x FTX_SIDE) Enum() *FTX_SIDE {
	p := new(FTX_SIDE)
	*p = x
	return p
}

func (x FTX_SIDE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTX_SIDE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_ftx_proto_ftx_proto_enumTypes[0].Descriptor()
}

func (FTX_SIDE) Type() protoreflect.EnumType {
	return &file_s_ftx_proto_ftx_proto_enumTypes[0]
}

func (x FTX_SIDE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTX_SIDE.Descriptor instead.
func (FTX_SIDE) EnumDescriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{0}
}

type FTX_TRADE_TYPE int32

const (
	FTX_TRADE_TYPE_FTX_TRADE_TYPE_LIMIT        FTX_TRADE_TYPE = 0
	FTX_TRADE_TYPE_FTX_TRADE_TYPE_MARKET       FTX_TRADE_TYPE = 1
	FTX_TRADE_TYPE_FTX_TRADE_TYPE_STOP         FTX_TRADE_TYPE = 2
	FTX_TRADE_TYPE_FTX_TRADE_TYPE_TRALING_STOP FTX_TRADE_TYPE = 3
	FTX_TRADE_TYPE_FTX_TRADE_TYPE_TAKE_PROFIT  FTX_TRADE_TYPE = 4
)

// Enum value maps for FTX_TRADE_TYPE.
var (
	FTX_TRADE_TYPE_name = map[int32]string{
		0: "FTX_TRADE_TYPE_LIMIT",
		1: "FTX_TRADE_TYPE_MARKET",
		2: "FTX_TRADE_TYPE_STOP",
		3: "FTX_TRADE_TYPE_TRALING_STOP",
		4: "FTX_TRADE_TYPE_TAKE_PROFIT",
	}
	FTX_TRADE_TYPE_value = map[string]int32{
		"FTX_TRADE_TYPE_LIMIT":        0,
		"FTX_TRADE_TYPE_MARKET":       1,
		"FTX_TRADE_TYPE_STOP":         2,
		"FTX_TRADE_TYPE_TRALING_STOP": 3,
		"FTX_TRADE_TYPE_TAKE_PROFIT":  4,
	}
)

func (x FTX_TRADE_TYPE) Enum() *FTX_TRADE_TYPE {
	p := new(FTX_TRADE_TYPE)
	*p = x
	return p
}

func (x FTX_TRADE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTX_TRADE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_ftx_proto_ftx_proto_enumTypes[1].Descriptor()
}

func (FTX_TRADE_TYPE) Type() protoreflect.EnumType {
	return &file_s_ftx_proto_ftx_proto_enumTypes[1]
}

func (x FTX_TRADE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTX_TRADE_TYPE.Descriptor instead.
func (FTX_TRADE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{1}
}

type FTX_CONTRACT_TYPE int32

const (
	FTX_CONTRACT_TYPE_FTX_CONTRACT_TYPE_SPOT      FTX_CONTRACT_TYPE = 0
	FTX_CONTRACT_TYPE_FTX_CONTRACT_TYPE_FUTURE    FTX_CONTRACT_TYPE = 1
	FTX_CONTRACT_TYPE_FTX_CONTRACT_TYPE_PERPETUAL FTX_CONTRACT_TYPE = 2
	FTX_CONTRACT_TYPE_FTX_CONTRACT_TYPE_MOVE      FTX_CONTRACT_TYPE = 3
)

// Enum value maps for FTX_CONTRACT_TYPE.
var (
	FTX_CONTRACT_TYPE_name = map[int32]string{
		0: "FTX_CONTRACT_TYPE_SPOT",
		1: "FTX_CONTRACT_TYPE_FUTURE",
		2: "FTX_CONTRACT_TYPE_PERPETUAL",
		3: "FTX_CONTRACT_TYPE_MOVE",
	}
	FTX_CONTRACT_TYPE_value = map[string]int32{
		"FTX_CONTRACT_TYPE_SPOT":      0,
		"FTX_CONTRACT_TYPE_FUTURE":    1,
		"FTX_CONTRACT_TYPE_PERPETUAL": 2,
		"FTX_CONTRACT_TYPE_MOVE":      3,
	}
)

func (x FTX_CONTRACT_TYPE) Enum() *FTX_CONTRACT_TYPE {
	p := new(FTX_CONTRACT_TYPE)
	*p = x
	return p
}

func (x FTX_CONTRACT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTX_CONTRACT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_ftx_proto_ftx_proto_enumTypes[2].Descriptor()
}

func (FTX_CONTRACT_TYPE) Type() protoreflect.EnumType {
	return &file_s_ftx_proto_ftx_proto_enumTypes[2]
}

func (x FTX_CONTRACT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTX_CONTRACT_TYPE.Descriptor instead.
func (FTX_CONTRACT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{2}
}

type ListAccountDepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId string `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// Seconds in unix time
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// Seconds in unix time
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ListAccountDepositsRequest) Reset() {
	*x = ListAccountDepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountDepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountDepositsRequest) ProtoMessage() {}

func (x *ListAccountDepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountDepositsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountDepositsRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{0}
}

func (x *ListAccountDepositsRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ListAccountDepositsRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListAccountDepositsRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type FTXCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey     string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SecretKey  string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Subaccount string `protobuf:"bytes,3,opt,name=subaccount,proto3" json:"subaccount,omitempty"`
}

func (x *FTXCredentials) Reset() {
	*x = FTXCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FTXCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTXCredentials) ProtoMessage() {}

func (x *FTXCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTXCredentials.ProtoReflect.Descriptor instead.
func (*FTXCredentials) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{1}
}

func (x *FTXCredentials) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *FTXCredentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *FTXCredentials) GetSubaccount() string {
	if x != nil {
		return x.Subaccount
	}
	return ""
}

type ListAccountDepositsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deposits []*DepositRecord `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (x *ListAccountDepositsResponse) Reset() {
	*x = ListAccountDepositsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountDepositsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountDepositsResponse) ProtoMessage() {}

func (x *ListAccountDepositsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountDepositsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountDepositsResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{2}
}

func (x *ListAccountDepositsResponse) GetDeposits() []*DepositRecord {
	if x != nil {
		return x.Deposits
	}
	return nil
}

type DepositRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin          string                 `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Confirmations int64                  `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	ConfirmedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=confirmed_time,json=confirmedTime,proto3" json:"confirmed_time,omitempty"`
	Fee           float32                `protobuf:"fixed32,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Id            int64                  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	SentTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	Size          float32                `protobuf:"fixed32,7,opt,name=size,proto3" json:"size,omitempty"`
	Status        string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	TransactionId string                 `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *DepositRecord) Reset() {
	*x = DepositRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecord) ProtoMessage() {}

func (x *DepositRecord) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecord.ProtoReflect.Descriptor instead.
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{3}
}

func (x *DepositRecord) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *DepositRecord) GetConfirmations() int64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *DepositRecord) GetConfirmedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmedTime
	}
	return nil
}

func (x *DepositRecord) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *DepositRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DepositRecord) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *DepositRecord) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DepositRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DepositRecord) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DepositRecord) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetFTXStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFTXStatusRequest) Reset() {
	*x = GetFTXStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFTXStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFTXStatusRequest) ProtoMessage() {}

func (x *GetFTXStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFTXStatusRequest.ProtoReflect.Descriptor instead.
func (*GetFTXStatusRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{4}
}

type GetFTXStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTime     int64 `protobuf:"varint,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	RequestLatency int64 `protobuf:"varint,2,opt,name=request_latency,json=requestLatency,proto3" json:"request_latency,omitempty"`
}

func (x *GetFTXStatusResponse) Reset() {
	*x = GetFTXStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFTXStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFTXStatusResponse) ProtoMessage() {}

func (x *GetFTXStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFTXStatusResponse.ProtoReflect.Descriptor instead.
func (*GetFTXStatusResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{5}
}

func (x *GetFTXStatusResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *GetFTXStatusResponse) GetRequestLatency() int64 {
	if x != nil {
		return x.RequestLatency
	}
	return 0
}

type GetFTXFundingRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit     int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetFTXFundingRatesRequest) Reset() {
	*x = GetFTXFundingRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFTXFundingRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFTXFundingRatesRequest) ProtoMessage() {}

func (x *GetFTXFundingRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFTXFundingRatesRequest.ProtoReflect.Descriptor instead.
func (*GetFTXFundingRatesRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{6}
}

func (x *GetFTXFundingRatesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetFTXFundingRatesRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetFTXFundingRatesRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetFTXFundingRatesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FTXFundingRatesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol      string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	FundingRate float32 `protobuf:"fixed32,2,opt,name=funding_rate,json=fundingRate,proto3" json:"funding_rate,omitempty"`
	FundingTime string  `protobuf:"bytes,3,opt,name=funding_time,json=fundingTime,proto3" json:"funding_time,omitempty"`
}

func (x *FTXFundingRatesInfo) Reset() {
	*x = FTXFundingRatesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FTXFundingRatesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTXFundingRatesInfo) ProtoMessage() {}

func (x *FTXFundingRatesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTXFundingRatesInfo.ProtoReflect.Descriptor instead.
func (*FTXFundingRatesInfo) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{7}
}

func (x *FTXFundingRatesInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FTXFundingRatesInfo) GetFundingRate() float32 {
	if x != nil {
		return x.FundingRate
	}
	return 0
}

func (x *FTXFundingRatesInfo) GetFundingTime() string {
	if x != nil {
		return x.FundingTime
	}
	return ""
}

type GetFTXFundingRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundingRates []*FTXFundingRatesInfo `protobuf:"bytes,1,rep,name=funding_rates,json=fundingRates,proto3" json:"funding_rates,omitempty"`
}

func (x *GetFTXFundingRatesResponse) Reset() {
	*x = GetFTXFundingRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFTXFundingRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFTXFundingRatesResponse) ProtoMessage() {}

func (x *GetFTXFundingRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFTXFundingRatesResponse.ProtoReflect.Descriptor instead.
func (*GetFTXFundingRatesResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{8}
}

func (x *GetFTXFundingRatesResponse) GetFundingRates() []*FTXFundingRatesInfo {
	if x != nil {
		return x.FundingRates
	}
	return nil
}

type FTXOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol            string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side              FTX_SIDE       `protobuf:"varint,2,opt,name=side,proto3,enum=FTX_SIDE" json:"side,omitempty"`
	Price             float32        `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Type              FTX_TRADE_TYPE `protobuf:"varint,4,opt,name=type,proto3,enum=FTX_TRADE_TYPE" json:"type,omitempty"`
	Quantity          float32        `protobuf:"fixed32,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ReduceOnly        bool           `protobuf:"varint,6,opt,name=reduce_only,json=reduceOnly,proto3" json:"reduce_only,omitempty"`
	Ioc               bool           `protobuf:"varint,7,opt,name=ioc,proto3" json:"ioc,omitempty"`
	PostOnly          bool           `protobuf:"varint,8,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	RejectOnPriceBand bool           `protobuf:"varint,9,opt,name=reject_on_price_band,json=rejectOnPriceBand,proto3" json:"reject_on_price_band,omitempty"`
	RetryUntilFilled  bool           `protobuf:"varint,10,opt,name=retry_until_filled,json=retryUntilFilled,proto3" json:"retry_until_filled,omitempty"`
	TriggerPrice      float32        `protobuf:"fixed32,11,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	OrderPrice        float32        `protobuf:"fixed32,12,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	TrailValue        float32        `protobuf:"fixed32,13,opt,name=trail_value,json=trailValue,proto3" json:"trail_value,omitempty"`
}

func (x *FTXOrder) Reset() {
	*x = FTXOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FTXOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTXOrder) ProtoMessage() {}

func (x *FTXOrder) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTXOrder.ProtoReflect.Descriptor instead.
func (*FTXOrder) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{9}
}

func (x *FTXOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FTXOrder) GetSide() FTX_SIDE {
	if x != nil {
		return x.Side
	}
	return FTX_SIDE_FTX_SIDE_BUY
}

func (x *FTXOrder) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FTXOrder) GetType() FTX_TRADE_TYPE {
	if x != nil {
		return x.Type
	}
	return FTX_TRADE_TYPE_FTX_TRADE_TYPE_LIMIT
}

func (x *FTXOrder) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *FTXOrder) GetReduceOnly() bool {
	if x != nil {
		return x.ReduceOnly
	}
	return false
}

func (x *FTXOrder) GetIoc() bool {
	if x != nil {
		return x.Ioc
	}
	return false
}

func (x *FTXOrder) GetPostOnly() bool {
	if x != nil {
		return x.PostOnly
	}
	return false
}

func (x *FTXOrder) GetRejectOnPriceBand() bool {
	if x != nil {
		return x.RejectOnPriceBand
	}
	return false
}

func (x *FTXOrder) GetRetryUntilFilled() bool {
	if x != nil {
		return x.RetryUntilFilled
	}
	return false
}

func (x *FTXOrder) GetTriggerPrice() float32 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *FTXOrder) GetOrderPrice() float32 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *FTXOrder) GetTrailValue() float32 {
	if x != nil {
		return x.TrailValue
	}
	return 0
}

type ExecuteNewOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order       *proto.Order            `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Timestamp   *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Credentials *proto.VenueCredentials `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ExecuteNewOrderRequest) Reset() {
	*x = ExecuteNewOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNewOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNewOrderRequest) ProtoMessage() {}

func (x *ExecuteNewOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNewOrderRequest.ProtoReflect.Descriptor instead.
func (*ExecuteNewOrderRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteNewOrderRequest) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ExecuteNewOrderRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExecuteNewOrderRequest) GetCredentials() *proto.VenueCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ExecuteNewOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *proto.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ExecuteNewOrderResponse) Reset() {
	*x = ExecuteNewOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNewOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNewOrderResponse) ProtoMessage() {}

func (x *ExecuteNewOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNewOrderResponse.ProtoReflect.Descriptor instead.
func (*ExecuteNewOrderResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteNewOrderResponse) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type ListFTXInstrumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractTypes []FTX_CONTRACT_TYPE `protobuf:"varint,1,rep,packed,name=contract_types,json=contractTypes,proto3,enum=FTX_CONTRACT_TYPE" json:"contract_types,omitempty"`
}

func (x *ListFTXInstrumentsRequest) Reset() {
	*x = ListFTXInstrumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFTXInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFTXInstrumentsRequest) ProtoMessage() {}

func (x *ListFTXInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFTXInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*ListFTXInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{12}
}

func (x *ListFTXInstrumentsRequest) GetContractTypes() []FTX_CONTRACT_TYPE {
	if x != nil {
		return x.ContractTypes
	}
	return nil
}

type ListFTXInstrumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Instrument `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *ListFTXInstrumentsResponse) Reset() {
	*x = ListFTXInstrumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFTXInstrumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFTXInstrumentsResponse) ProtoMessage() {}

func (x *ListFTXInstrumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFTXInstrumentsResponse.ProtoReflect.Descriptor instead.
func (*ListFTXInstrumentsResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{13}
}

func (x *ListFTXInstrumentsResponse) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol          string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PostOnly        bool    `protobuf:"varint,2,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	Enabled         bool    `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MinimumTickSize float32 `protobuf:"fixed32,4,opt,name=minimum_tick_size,json=minimumTickSize,proto3" json:"minimum_tick_size,omitempty"`
	MinimumQuantity float32 `protobuf:"fixed32,5,opt,name=minimum_quantity,json=minimumQuantity,proto3" json:"minimum_quantity,omitempty"`
	Type            string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Underlying      string  `protobuf:"bytes,7,opt,name=underlying,proto3" json:"underlying,omitempty"`
	BaseCurrency    string  `protobuf:"bytes,8,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	QuoteCurrency   string  `protobuf:"bytes,9,opt,name=quote_currency,json=quoteCurrency,proto3" json:"quote_currency,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{14}
}

func (x *Instrument) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Instrument) GetPostOnly() bool {
	if x != nil {
		return x.PostOnly
	}
	return false
}

func (x *Instrument) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Instrument) GetMinimumTickSize() float32 {
	if x != nil {
		return x.MinimumTickSize
	}
	return 0
}

func (x *Instrument) GetMinimumQuantity() float32 {
	if x != nil {
		return x.MinimumQuantity
	}
	return 0
}

func (x *Instrument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Instrument) GetUnderlying() string {
	if x != nil {
		return x.Underlying
	}
	return ""
}

func (x *Instrument) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *Instrument) GetQuoteCurrency() string {
	if x != nil {
		return x.QuoteCurrency
	}
	return ""
}

type ReadAccountInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials    *proto.VenueCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	ActorId        string                  `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	RequestContext string                  `protobuf:"bytes,3,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
}

func (x *ReadAccountInformationRequest) Reset() {
	*x = ReadAccountInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAccountInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAccountInformationRequest) ProtoMessage() {}

func (x *ReadAccountInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAccountInformationRequest.ProtoReflect.Descriptor instead.
func (*ReadAccountInformationRequest) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{15}
}

func (x *ReadAccountInformationRequest) GetCredentials() *proto.VenueCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ReadAccountInformationRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ReadAccountInformationRequest) GetRequestContext() string {
	if x != nil {
		return x.RequestContext
	}
	return ""
}

type ReadAccountInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackstopProvider             bool    `protobuf:"varint,1,opt,name=backstopProvider,proto3" json:"backstopProvider,omitempty"`
	Collateral                   float32 `protobuf:"fixed32,2,opt,name=collateral,proto3" json:"collateral,omitempty"`
	FreeCollateral               float32 `protobuf:"fixed32,3,opt,name=free_collateral,json=freeCollateral,proto3" json:"free_collateral,omitempty"`
	InitalMarginRequirement      float32 `protobuf:"fixed32,4,opt,name=initalMarginRequirement,proto3" json:"initalMarginRequirement,omitempty"`
	Leverage                     int64   `protobuf:"varint,5,opt,name=leverage,proto3" json:"leverage,omitempty"`
	Liquidating                  bool    `protobuf:"varint,6,opt,name=liquidating,proto3" json:"liquidating,omitempty"`
	MaintenanceMarginRequirement float32 `protobuf:"fixed32,7,opt,name=maintenanceMarginRequirement,proto3" json:"maintenanceMarginRequirement,omitempty"`
	MakerFee                     float32 `protobuf:"fixed32,8,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	MarginFraction               float32 `protobuf:"fixed32,9,opt,name=marginFraction,proto3" json:"marginFraction,omitempty"`
	OpenMarginFraction           float32 `protobuf:"fixed32,10,opt,name=openMarginFraction,proto3" json:"openMarginFraction,omitempty"`
	TakerFee                     float32 `protobuf:"fixed32,11,opt,name=takerFee,proto3" json:"takerFee,omitempty"`
	TotalAccountValue            float32 `protobuf:"fixed32,12,opt,name=totalAccountValue,proto3" json:"totalAccountValue,omitempty"`
	TotalPositionSize            float32 `protobuf:"fixed32,13,opt,name=totalPositionSize,proto3" json:"totalPositionSize,omitempty"`
	Username                     string  `protobuf:"bytes,14,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ReadAccountInformationResponse) Reset() {
	*x = ReadAccountInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_ftx_proto_ftx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAccountInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAccountInformationResponse) ProtoMessage() {}

func (x *ReadAccountInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_ftx_proto_ftx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAccountInformationResponse.ProtoReflect.Descriptor instead.
func (*ReadAccountInformationResponse) Descriptor() ([]byte, []int) {
	return file_s_ftx_proto_ftx_proto_rawDescGZIP(), []int{16}
}

func (x *ReadAccountInformationResponse) GetBackstopProvider() bool {
	if x != nil {
		return x.BackstopProvider
	}
	return false
}

func (x *ReadAccountInformationResponse) GetCollateral() float32 {
	if x != nil {
		return x.Collateral
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetFreeCollateral() float32 {
	if x != nil {
		return x.FreeCollateral
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetInitalMarginRequirement() float32 {
	if x != nil {
		return x.InitalMarginRequirement
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetLeverage() int64 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetLiquidating() bool {
	if x != nil {
		return x.Liquidating
	}
	return false
}

func (x *ReadAccountInformationResponse) GetMaintenanceMarginRequirement() float32 {
	if x != nil {
		return x.MaintenanceMarginRequirement
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetMakerFee() float32 {
	if x != nil {
		return x.MakerFee
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetMarginFraction() float32 {
	if x != nil {
		return x.MarginFraction
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetOpenMarginFraction() float32 {
	if x != nil {
		return x.OpenMarginFraction
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetTakerFee() float32 {
	if x != nil {
		return x.TakerFee
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetTotalAccountValue() float32 {
	if x != nil {
		return x.TotalAccountValue
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetTotalPositionSize() float32 {
	if x != nil {
		return x.TotalPositionSize
	}
	return 0
}

func (x *ReadAccountInformationResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_s_ftx_proto_ftx_proto protoreflect.FileDescriptor

var file_s_ftx_proto_ftx_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x2e, 0x66, 0x74, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x74,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5f, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x68, 0x0a, 0x0e, 0x46, 0x54, 0x58, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x54, 0x58, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x54, 0x58, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x83, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x46, 0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x73, 0x0a, 0x13, 0x46, 0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x54,
	0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46,
	0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xae, 0x03, 0x0a, 0x08, 0x46, 0x54, 0x58, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x46, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x46, 0x54, 0x58, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x6f, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x37, 0x0a, 0x17, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x56, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x54, 0x58, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x46, 0x54, 0x58, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x54, 0x58, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x98, 0x01, 0x0a,
	0x1d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd9, 0x04, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x66, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x38, 0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x1c, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x2f, 0x0a, 0x08, 0x46, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x9f, 0x01, 0x0a, 0x0e, 0x46, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x54, 0x58, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x54, 0x58, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x54, 0x10, 0x04, 0x2a, 0x8a, 0x01, 0x0a, 0x11, 0x46, 0x54, 0x58, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x54, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x54, 0x58, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x50,
	0x45, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x54, 0x58, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x03, 0x32, 0xdf, 0x03, 0x0a, 0x03, 0x66, 0x74, 0x78, 0x12, 0x3d, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x46, 0x54, 0x58, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x54, 0x58, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x54, 0x58, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x46, 0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x54, 0x58, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x12, 0x1b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x54, 0x58, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x54, 0x58, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x54, 0x58, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x73, 0x77, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x74, 0x61, 0x69, 0x6c, 0x2f, 0x73, 0x2e, 0x66, 0x74, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x66, 0x74, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_s_ftx_proto_ftx_proto_rawDescOnce sync.Once
	file_s_ftx_proto_ftx_proto_rawDescData = file_s_ftx_proto_ftx_proto_rawDesc
)

func file_s_ftx_proto_ftx_proto_rawDescGZIP() []byte {
	file_s_ftx_proto_ftx_proto_rawDescOnce.Do(func() {
		file_s_ftx_proto_ftx_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_ftx_proto_ftx_proto_rawDescData)
	})
	return file_s_ftx_proto_ftx_proto_rawDescData
}

var file_s_ftx_proto_ftx_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_s_ftx_proto_ftx_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_s_ftx_proto_ftx_proto_goTypes = []interface{}{
	(FTX_SIDE)(0),                          // 0: FTX_SIDE
	(FTX_TRADE_TYPE)(0),                    // 1: FTX_TRADE_TYPE
	(FTX_CONTRACT_TYPE)(0),                 // 2: FTX_CONTRACT_TYPE
	(*ListAccountDepositsRequest)(nil),     // 3: ListAccountDepositsRequest
	(*FTXCredentials)(nil),                 // 4: FTXCredentials
	(*ListAccountDepositsResponse)(nil),    // 5: ListAccountDepositsResponse
	(*DepositRecord)(nil),                  // 6: DepositRecord
	(*GetFTXStatusRequest)(nil),            // 7: GetFTXStatusRequest
	(*GetFTXStatusResponse)(nil),           // 8: GetFTXStatusResponse
	(*GetFTXFundingRatesRequest)(nil),      // 9: GetFTXFundingRatesRequest
	(*FTXFundingRatesInfo)(nil),            // 10: FTXFundingRatesInfo
	(*GetFTXFundingRatesResponse)(nil),     // 11: GetFTXFundingRatesResponse
	(*FTXOrder)(nil),                       // 12: FTXOrder
	(*ExecuteNewOrderRequest)(nil),         // 13: ExecuteNewOrderRequest
	(*ExecuteNewOrderResponse)(nil),        // 14: ExecuteNewOrderResponse
	(*ListFTXInstrumentsRequest)(nil),      // 15: ListFTXInstrumentsRequest
	(*ListFTXInstrumentsResponse)(nil),     // 16: ListFTXInstrumentsResponse
	(*Instrument)(nil),                     // 17: Instrument
	(*ReadAccountInformationRequest)(nil),  // 18: ReadAccountInformationRequest
	(*ReadAccountInformationResponse)(nil), // 19: ReadAccountInformationResponse
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
	(*proto.Order)(nil),                    // 21: Order
	(*proto.VenueCredentials)(nil),         // 22: VenueCredentials
}
var file_s_ftx_proto_ftx_proto_depIdxs = []int32{
	6,  // 0: ListAccountDepositsResponse.deposits:type_name -> DepositRecord
	20, // 1: DepositRecord.confirmed_time:type_name -> google.protobuf.Timestamp
	20, // 2: DepositRecord.sent_time:type_name -> google.protobuf.Timestamp
	20, // 3: DepositRecord.time:type_name -> google.protobuf.Timestamp
	10, // 4: GetFTXFundingRatesResponse.funding_rates:type_name -> FTXFundingRatesInfo
	0,  // 5: FTXOrder.side:type_name -> FTX_SIDE
	1,  // 6: FTXOrder.type:type_name -> FTX_TRADE_TYPE
	21, // 7: ExecuteNewOrderRequest.order:type_name -> Order
	20, // 8: ExecuteNewOrderRequest.timestamp:type_name -> google.protobuf.Timestamp
	22, // 9: ExecuteNewOrderRequest.credentials:type_name -> VenueCredentials
	21, // 10: ExecuteNewOrderResponse.order:type_name -> Order
	2,  // 11: ListFTXInstrumentsRequest.contract_types:type_name -> FTX_CONTRACT_TYPE
	17, // 12: ListFTXInstrumentsResponse.instruments:type_name -> Instrument
	22, // 13: ReadAccountInformationRequest.credentials:type_name -> VenueCredentials
	7,  // 14: ftx.GetFTXStatus:input_type -> GetFTXStatusRequest
	9,  // 15: ftx.GetFTXFundingRates:input_type -> GetFTXFundingRatesRequest
	3,  // 16: ftx.ListAccountDeposits:input_type -> ListAccountDepositsRequest
	13, // 17: ftx.ExecuteNewOrder:input_type -> ExecuteNewOrderRequest
	15, // 18: ftx.ListFTXInstruments:input_type -> ListFTXInstrumentsRequest
	18, // 19: ftx.ReadAccountInformation:input_type -> ReadAccountInformationRequest
	8,  // 20: ftx.GetFTXStatus:output_type -> GetFTXStatusResponse
	11, // 21: ftx.GetFTXFundingRates:output_type -> GetFTXFundingRatesResponse
	5,  // 22: ftx.ListAccountDeposits:output_type -> ListAccountDepositsResponse
	14, // 23: ftx.ExecuteNewOrder:output_type -> ExecuteNewOrderResponse
	16, // 24: ftx.ListFTXInstruments:output_type -> ListFTXInstrumentsResponse
	19, // 25: ftx.ReadAccountInformation:output_type -> ReadAccountInformationResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_s_ftx_proto_ftx_proto_init() }
func file_s_ftx_proto_ftx_proto_init() {
	if File_s_ftx_proto_ftx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_ftx_proto_ftx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountDepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FTXCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountDepositsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFTXStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFTXStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFTXFundingRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FTXFundingRatesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFTXFundingRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FTXOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteNewOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteNewOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFTXInstrumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFTXInstrumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAccountInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_ftx_proto_ftx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAccountInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_ftx_proto_ftx_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_ftx_proto_ftx_proto_goTypes,
		DependencyIndexes: file_s_ftx_proto_ftx_proto_depIdxs,
		EnumInfos:         file_s_ftx_proto_ftx_proto_enumTypes,
		MessageInfos:      file_s_ftx_proto_ftx_proto_msgTypes,
	}.Build()
	File_s_ftx_proto_ftx_proto = out.File
	file_s_ftx_proto_ftx_proto_rawDesc = nil
	file_s_ftx_proto_ftx_proto_goTypes = nil
	file_s_ftx_proto_ftx_proto_depIdxs = nil
}
