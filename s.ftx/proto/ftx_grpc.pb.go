// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ftxproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FtxClient is the client API for Ftx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FtxClient interface {
	GetFTXStatus(ctx context.Context, in *GetFTXStatusRequest, opts ...grpc.CallOption) (*GetFTXStatusResponse, error)
	GetFTXFundingRates(ctx context.Context, in *GetFTXFundingRatesRequest, opts ...grpc.CallOption) (*GetFTXFundingRatesResponse, error)
	ListAccountDeposits(ctx context.Context, in *ListAccountDepositsRequest, opts ...grpc.CallOption) (*ListAccountDepositsResponse, error)
	ExecuteNewOrder(ctx context.Context, in *ExecuteNewOrderRequest, opts ...grpc.CallOption) (*ExecuteNewOrderResponse, error)
	ListFTXInstruments(ctx context.Context, in *ListFTXInstrumentsRequest, opts ...grpc.CallOption) (*ListFTXInstrumentsResponse, error)
}

type ftxClient struct {
	cc grpc.ClientConnInterface
}

func NewFtxClient(cc grpc.ClientConnInterface) FtxClient {
	return &ftxClient{cc}
}

func (c *ftxClient) GetFTXStatus(ctx context.Context, in *GetFTXStatusRequest, opts ...grpc.CallOption) (*GetFTXStatusResponse, error) {
	out := new(GetFTXStatusResponse)
	err := c.cc.Invoke(ctx, "/ftx/GetFTXStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftxClient) GetFTXFundingRates(ctx context.Context, in *GetFTXFundingRatesRequest, opts ...grpc.CallOption) (*GetFTXFundingRatesResponse, error) {
	out := new(GetFTXFundingRatesResponse)
	err := c.cc.Invoke(ctx, "/ftx/GetFTXFundingRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftxClient) ListAccountDeposits(ctx context.Context, in *ListAccountDepositsRequest, opts ...grpc.CallOption) (*ListAccountDepositsResponse, error) {
	out := new(ListAccountDepositsResponse)
	err := c.cc.Invoke(ctx, "/ftx/ListAccountDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftxClient) ExecuteNewOrder(ctx context.Context, in *ExecuteNewOrderRequest, opts ...grpc.CallOption) (*ExecuteNewOrderResponse, error) {
	out := new(ExecuteNewOrderResponse)
	err := c.cc.Invoke(ctx, "/ftx/ExecuteNewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftxClient) ListFTXInstruments(ctx context.Context, in *ListFTXInstrumentsRequest, opts ...grpc.CallOption) (*ListFTXInstrumentsResponse, error) {
	out := new(ListFTXInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/ftx/ListFTXInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FtxServer is the server API for Ftx service.
// All implementations must embed UnimplementedFtxServer
// for forward compatibility
type FtxServer interface {
	GetFTXStatus(context.Context, *GetFTXStatusRequest) (*GetFTXStatusResponse, error)
	GetFTXFundingRates(context.Context, *GetFTXFundingRatesRequest) (*GetFTXFundingRatesResponse, error)
	ListAccountDeposits(context.Context, *ListAccountDepositsRequest) (*ListAccountDepositsResponse, error)
	ExecuteNewOrder(context.Context, *ExecuteNewOrderRequest) (*ExecuteNewOrderResponse, error)
	ListFTXInstruments(context.Context, *ListFTXInstrumentsRequest) (*ListFTXInstrumentsResponse, error)
	mustEmbedUnimplementedFtxServer()
}

// UnimplementedFtxServer must be embedded to have forward compatible implementations.
type UnimplementedFtxServer struct {
}

func (*UnimplementedFtxServer) GetFTXStatus(context.Context, *GetFTXStatusRequest) (*GetFTXStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFTXStatus not implemented")
}
func (*UnimplementedFtxServer) GetFTXFundingRates(context.Context, *GetFTXFundingRatesRequest) (*GetFTXFundingRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFTXFundingRates not implemented")
}
func (*UnimplementedFtxServer) ListAccountDeposits(context.Context, *ListAccountDepositsRequest) (*ListAccountDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountDeposits not implemented")
}
func (*UnimplementedFtxServer) ExecuteNewOrder(context.Context, *ExecuteNewOrderRequest) (*ExecuteNewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteNewOrder not implemented")
}
func (*UnimplementedFtxServer) ListFTXInstruments(context.Context, *ListFTXInstrumentsRequest) (*ListFTXInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFTXInstruments not implemented")
}
func (*UnimplementedFtxServer) mustEmbedUnimplementedFtxServer() {}

func RegisterFtxServer(s *grpc.Server, srv FtxServer) {
	s.RegisterService(&_Ftx_serviceDesc, srv)
}

func _Ftx_GetFTXStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFTXStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtxServer).GetFTXStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftx/GetFTXStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtxServer).GetFTXStatus(ctx, req.(*GetFTXStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ftx_GetFTXFundingRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFTXFundingRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtxServer).GetFTXFundingRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftx/GetFTXFundingRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtxServer).GetFTXFundingRates(ctx, req.(*GetFTXFundingRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ftx_ListAccountDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtxServer).ListAccountDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftx/ListAccountDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtxServer).ListAccountDeposits(ctx, req.(*ListAccountDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ftx_ExecuteNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteNewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtxServer).ExecuteNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftx/ExecuteNewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtxServer).ExecuteNewOrder(ctx, req.(*ExecuteNewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ftx_ListFTXInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFTXInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtxServer).ListFTXInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftx/ListFTXInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtxServer).ListFTXInstruments(ctx, req.(*ListFTXInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ftx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ftx",
	HandlerType: (*FtxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFTXStatus",
			Handler:    _Ftx_GetFTXStatus_Handler,
		},
		{
			MethodName: "GetFTXFundingRates",
			Handler:    _Ftx_GetFTXFundingRates_Handler,
		},
		{
			MethodName: "ListAccountDeposits",
			Handler:    _Ftx_ListAccountDeposits_Handler,
		},
		{
			MethodName: "ExecuteNewOrder",
			Handler:    _Ftx_ExecuteNewOrder_Handler,
		},
		{
			MethodName: "ListFTXInstruments",
			Handler:    _Ftx_ListFTXInstruments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.ftx/proto/ftx.proto",
}
