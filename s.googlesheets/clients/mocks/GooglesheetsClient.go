// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GooglesheetsClient is an autogenerated mock type for the GooglesheetsClient type
type GooglesheetsClient struct {
	mock.Mock
}

// Ping provides a mock function with given fields: ctx
func (_m *GooglesheetsClient) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateRows provides a mock function with given fields: ctx, sheetID, rowsRange, values
func (_m *GooglesheetsClient) UpdateRows(ctx context.Context, sheetID string, rowsRange string, values [][]interface{}) error {
	ret := _m.Called(ctx, sheetID, rowsRange, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, [][]interface{}) error); ok {
		r0 = rf(ctx, sheetID, rowsRange, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Values provides a mock function with given fields: sheetID, rowsRange
func (_m *GooglesheetsClient) Values(sheetID string, rowsRange string) ([][]interface{}, error) {
	ret := _m.Called(sheetID, rowsRange)

	var r0 [][]interface{}
	if rf, ok := ret.Get(0).(func(string, string) [][]interface{}); ok {
		r0 = rf(sheetID, rowsRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sheetID, rowsRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
