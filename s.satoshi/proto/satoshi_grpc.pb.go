// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package satoshiproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SatoshiClient is the client API for Satoshi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SatoshiClient interface {
	PublishStatus(ctx context.Context, in *PublishStatusRequest, opts ...grpc.CallOption) (*PublishStatusResponse, error)
}

type satoshiClient struct {
	cc grpc.ClientConnInterface
}

func NewSatoshiClient(cc grpc.ClientConnInterface) SatoshiClient {
	return &satoshiClient{cc}
}

func (c *satoshiClient) PublishStatus(ctx context.Context, in *PublishStatusRequest, opts ...grpc.CallOption) (*PublishStatusResponse, error) {
	out := new(PublishStatusResponse)
	err := c.cc.Invoke(ctx, "/satoshi/PublishStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SatoshiServer is the server API for Satoshi service.
// All implementations must embed UnimplementedSatoshiServer
// for forward compatibility
type SatoshiServer interface {
	PublishStatus(context.Context, *PublishStatusRequest) (*PublishStatusResponse, error)
	mustEmbedUnimplementedSatoshiServer()
}

// UnimplementedSatoshiServer must be embedded to have forward compatible implementations.
type UnimplementedSatoshiServer struct {
}

func (*UnimplementedSatoshiServer) PublishStatus(context.Context, *PublishStatusRequest) (*PublishStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStatus not implemented")
}
func (*UnimplementedSatoshiServer) mustEmbedUnimplementedSatoshiServer() {}

func RegisterSatoshiServer(s *grpc.Server, srv SatoshiServer) {
	s.RegisterService(&_Satoshi_serviceDesc, srv)
}

func _Satoshi_PublishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatoshiServer).PublishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/satoshi/PublishStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatoshiServer).PublishStatus(ctx, req.(*PublishStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Satoshi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "satoshi",
	HandlerType: (*SatoshiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishStatus",
			Handler:    _Satoshi_PublishStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.satoshi/proto/satoshi.proto",
}
