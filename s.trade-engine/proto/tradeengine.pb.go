// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: s.trade-engine/proto/tradeengine.proto

package tradeengineproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ACTOR_TYPE int32

const (
	ACTOR_TYPE_AUTOMATED ACTOR_TYPE = 0
	ACTOR_TYPE_MANUAL    ACTOR_TYPE = 1
	ACTOR_TYPE_INTERNAL  ACTOR_TYPE = 2
	ACTOR_TYPE_EXTERNAL  ACTOR_TYPE = 3
)

// Enum value maps for ACTOR_TYPE.
var (
	ACTOR_TYPE_name = map[int32]string{
		0: "AUTOMATED",
		1: "MANUAL",
		2: "INTERNAL",
		3: "EXTERNAL",
	}
	ACTOR_TYPE_value = map[string]int32{
		"AUTOMATED": 0,
		"MANUAL":    1,
		"INTERNAL":  2,
		"EXTERNAL":  3,
	}
)

func (x ACTOR_TYPE) Enum() *ACTOR_TYPE {
	p := new(ACTOR_TYPE)
	*p = x
	return p
}

func (x ACTOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[0].Descriptor()
}

func (ACTOR_TYPE) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[0]
}

func (x ACTOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTOR_TYPE.Descriptor instead.
func (ACTOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{0}
}

type TRADE_SIDE int32

const (
	TRADE_SIDE_BUY   TRADE_SIDE = 0
	TRADE_SIDE_SELL  TRADE_SIDE = 1
	TRADE_SIDE_LONG  TRADE_SIDE = 2
	TRADE_SIDE_SHORT TRADE_SIDE = 3
)

// Enum value maps for TRADE_SIDE.
var (
	TRADE_SIDE_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "LONG",
		3: "SHORT",
	}
	TRADE_SIDE_value = map[string]int32{
		"BUY":   0,
		"SELL":  1,
		"LONG":  2,
		"SHORT": 3,
	}
)

func (x TRADE_SIDE) Enum() *TRADE_SIDE {
	p := new(TRADE_SIDE)
	*p = x
	return p
}

func (x TRADE_SIDE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_SIDE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[1].Descriptor()
}

func (TRADE_SIDE) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[1]
}

func (x TRADE_SIDE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_SIDE.Descriptor instead.
func (TRADE_SIDE) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{1}
}

type TRADE_STATUS int32

const (
	TRADE_STATUS_PENDING   TRADE_STATUS = 0
	TRADE_STATUS_ACTIVE    TRADE_STATUS = 1
	TRADE_STATUS_COMPLETE  TRADE_STATUS = 2
	TRADE_STATUS_CANCELLED TRADE_STATUS = 3
)

// Enum value maps for TRADE_STATUS.
var (
	TRADE_STATUS_name = map[int32]string{
		0: "PENDING",
		1: "ACTIVE",
		2: "COMPLETE",
		3: "CANCELLED",
	}
	TRADE_STATUS_value = map[string]int32{
		"PENDING":   0,
		"ACTIVE":    1,
		"COMPLETE":  2,
		"CANCELLED": 3,
	}
)

func (x TRADE_STATUS) Enum() *TRADE_STATUS {
	p := new(TRADE_STATUS)
	*p = x
	return p
}

func (x TRADE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[2].Descriptor()
}

func (TRADE_STATUS) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[2]
}

func (x TRADE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_STATUS.Descriptor instead.
func (TRADE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{2}
}

type TRADE_TYPE int32

const (
	TRADE_TYPE_SPOT               TRADE_TYPE = 0
	TRADE_TYPE_FUTURES_PERPETUALS TRADE_TYPE = 1
	TRADE_TYPE_FUTURES_QUARTERLY  TRADE_TYPE = 2
)

// Enum value maps for TRADE_TYPE.
var (
	TRADE_TYPE_name = map[int32]string{
		0: "SPOT",
		1: "FUTURES_PERPETUALS",
		2: "FUTURES_QUARTERLY",
	}
	TRADE_TYPE_value = map[string]int32{
		"SPOT":               0,
		"FUTURES_PERPETUALS": 1,
		"FUTURES_QUARTERLY":  2,
	}
)

func (x TRADE_TYPE) Enum() *TRADE_TYPE {
	p := new(TRADE_TYPE)
	*p = x
	return p
}

func (x TRADE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[3].Descriptor()
}

func (TRADE_TYPE) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[3]
}

func (x TRADE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_TYPE.Descriptor instead.
func (TRADE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{3}
}

type TRADE_PAIR int32

const (
	TRADE_PAIR_USDT TRADE_PAIR = 0
	TRADE_PAIR_USD  TRADE_PAIR = 1
	TRADE_PAIR_BTC  TRADE_PAIR = 2
)

// Enum value maps for TRADE_PAIR.
var (
	TRADE_PAIR_name = map[int32]string{
		0: "USDT",
		1: "USD",
		2: "BTC",
	}
	TRADE_PAIR_value = map[string]int32{
		"USDT": 0,
		"USD":  1,
		"BTC":  2,
	}
)

func (x TRADE_PAIR) Enum() *TRADE_PAIR {
	p := new(TRADE_PAIR)
	*p = x
	return p
}

func (x TRADE_PAIR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_PAIR) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[4].Descriptor()
}

func (TRADE_PAIR) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[4]
}

func (x TRADE_PAIR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_PAIR.Descriptor instead.
func (TRADE_PAIR) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{4}
}

type ORDER_TYPE int32

const (
	ORDER_TYPE_LIMIT                       ORDER_TYPE = 0
	ORDER_TYPE_MARKET                      ORDER_TYPE = 1
	ORDER_TYPE_STOP_MARKET                 ORDER_TYPE = 2
	ORDER_TYPE_DCA_FIRST_MARKET_REST_LIMIT ORDER_TYPE = 3
	ORDER_TYPE_DCA_ALL_LIMIT               ORDER_TYPE = 4
)

// Enum value maps for ORDER_TYPE.
var (
	ORDER_TYPE_name = map[int32]string{
		0: "LIMIT",
		1: "MARKET",
		2: "STOP_MARKET",
		3: "DCA_FIRST_MARKET_REST_LIMIT",
		4: "DCA_ALL_LIMIT",
	}
	ORDER_TYPE_value = map[string]int32{
		"LIMIT":                       0,
		"MARKET":                      1,
		"STOP_MARKET":                 2,
		"DCA_FIRST_MARKET_REST_LIMIT": 3,
		"DCA_ALL_LIMIT":               4,
	}
)

func (x ORDER_TYPE) Enum() *ORDER_TYPE {
	p := new(ORDER_TYPE)
	*p = x
	return p
}

func (x ORDER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORDER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[5].Descriptor()
}

func (ORDER_TYPE) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[5]
}

func (x ORDER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORDER_TYPE.Descriptor instead.
func (ORDER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{5}
}

type DCA_STRATEGY int32

const (
	DCA_STRATEGY_CONSTANT    DCA_STRATEGY = 0
	DCA_STRATEGY_LINEAR      DCA_STRATEGY = 1
	DCA_STRATEGY_EXPONENTIAL DCA_STRATEGY = 2
)

// Enum value maps for DCA_STRATEGY.
var (
	DCA_STRATEGY_name = map[int32]string{
		0: "CONSTANT",
		1: "LINEAR",
		2: "EXPONENTIAL",
	}
	DCA_STRATEGY_value = map[string]int32{
		"CONSTANT":    0,
		"LINEAR":      1,
		"EXPONENTIAL": 2,
	}
)

func (x DCA_STRATEGY) Enum() *DCA_STRATEGY {
	p := new(DCA_STRATEGY)
	*p = x
	return p
}

func (x DCA_STRATEGY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DCA_STRATEGY) Descriptor() protoreflect.EnumDescriptor {
	return file_s_trade_engine_proto_tradeengine_proto_enumTypes[6].Descriptor()
}

func (DCA_STRATEGY) Type() protoreflect.EnumType {
	return &file_s_trade_engine_proto_tradeengine_proto_enumTypes[6]
}

func (x DCA_STRATEGY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DCA_STRATEGY.Descriptor instead.
func (DCA_STRATEGY) EnumDescriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{6}
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId            string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	ActorId            string                 `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	HumanizedActorName string                 `protobuf:"bytes,18,opt,name=humanized_actor_name,json=humanizedActorName,proto3" json:"humanized_actor_name,omitempty"`
	ActorType          ACTOR_TYPE             `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=ACTOR_TYPE" json:"actor_type,omitempty"`
	IdempotencyKey     string                 `protobuf:"bytes,4,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	OrderType          ORDER_TYPE             `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=ORDER_TYPE" json:"order_type,omitempty"`
	TradeType          TRADE_TYPE             `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=TRADE_TYPE" json:"trade_type,omitempty"`
	Asset              string                 `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	Pair               TRADE_PAIR             `protobuf:"varint,8,opt,name=pair,proto3,enum=TRADE_PAIR" json:"pair,omitempty"`
	Entries            []float32              `protobuf:"fixed32,9,rep,packed,name=entries,proto3" json:"entries,omitempty"`
	StopLoss           float32                `protobuf:"fixed32,10,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	TakeProfits        []float32              `protobuf:"fixed32,11,rep,packed,name=take_profits,json=takeProfits,proto3" json:"take_profits,omitempty"`
	Status             TRADE_STATUS           `protobuf:"varint,12,opt,name=status,proto3,enum=TRADE_STATUS" json:"status,omitempty"`
	Created            *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdated        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	TradeSide          TRADE_SIDE             `protobuf:"varint,16,opt,name=trade_side,json=tradeSide,proto3,enum=TRADE_SIDE" json:"trade_side,omitempty"`
	CurrentPrice       float32                `protobuf:"fixed32,17,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *Trade) GetHumanizedActorName() string {
	if x != nil {
		return x.HumanizedActorName
	}
	return ""
}

func (x *Trade) GetActorType() ACTOR_TYPE {
	if x != nil {
		return x.ActorType
	}
	return ACTOR_TYPE_AUTOMATED
}

func (x *Trade) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *Trade) GetOrderType() ORDER_TYPE {
	if x != nil {
		return x.OrderType
	}
	return ORDER_TYPE_LIMIT
}

func (x *Trade) GetTradeType() TRADE_TYPE {
	if x != nil {
		return x.TradeType
	}
	return TRADE_TYPE_SPOT
}

func (x *Trade) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Trade) GetPair() TRADE_PAIR {
	if x != nil {
		return x.Pair
	}
	return TRADE_PAIR_USDT
}

func (x *Trade) GetEntries() []float32 {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Trade) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *Trade) GetTakeProfits() []float32 {
	if x != nil {
		return x.TakeProfits
	}
	return nil
}

func (x *Trade) GetStatus() TRADE_STATUS {
	if x != nil {
		return x.Status
	}
	return TRADE_STATUS_PENDING
}

func (x *Trade) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Trade) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Trade) GetTradeSide() TRADE_SIDE {
	if x != nil {
		return x.TradeSide
	}
	return TRADE_SIDE_BUY
}

func (x *Trade) GetCurrentPrice() float32 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

type CreateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *CreateTradeRequest) Reset() {
	*x = CreateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeRequest) ProtoMessage() {}

func (x *CreateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeRequest) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTradeRequest) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

type CreateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateTradeResponse) Reset() {
	*x = CreateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeResponse) ProtoMessage() {}

func (x *CreateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeResponse) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTradeResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *CreateTradeResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type AddParticipantToTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId     string       `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	UserId      string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeId     string       `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Size        float32      `protobuf:"fixed32,5,opt,name=size,proto3" json:"size,omitempty"`
	Exchange    string       `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	IsBot       bool         `protobuf:"varint,7,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	Risk        float32      `protobuf:"fixed32,8,opt,name=risk,proto3" json:"risk,omitempty"`
	DcaStrategy DCA_STRATEGY `protobuf:"varint,9,opt,name=dca_strategy,json=dcaStrategy,proto3,enum=DCA_STRATEGY" json:"dca_strategy,omitempty"`
}

func (x *AddParticipantToTradeRequest) Reset() {
	*x = AddParticipantToTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddParticipantToTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddParticipantToTradeRequest) ProtoMessage() {}

func (x *AddParticipantToTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddParticipantToTradeRequest.ProtoReflect.Descriptor instead.
func (*AddParticipantToTradeRequest) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{3}
}

func (x *AddParticipantToTradeRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *AddParticipantToTradeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddParticipantToTradeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AddParticipantToTradeRequest) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddParticipantToTradeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *AddParticipantToTradeRequest) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *AddParticipantToTradeRequest) GetRisk() float32 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *AddParticipantToTradeRequest) GetDcaStrategy() DCA_STRATEGY {
	if x != nil {
		return x.DcaStrategy
	}
	return DCA_STRATEGY_CONSTANT
}

type AddParticipantToTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTradeId        string                 `protobuf:"bytes,1,opt,name=exchange_trade_id,json=exchangeTradeId,proto3" json:"exchange_trade_id,omitempty"`
	TradeParticipantId     string                 `protobuf:"bytes,2,opt,name=trade_participant_id,json=tradeParticipantId,proto3" json:"trade_participant_id,omitempty"`
	TradeId                string                 `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	NotionalSize           float32                `protobuf:"fixed32,4,opt,name=notional_size,json=notionalSize,proto3" json:"notional_size,omitempty"`
	Timestamp              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Exchange               string                 `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Asset                  string                 `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	NumberOfExecutedOrders int64                  `protobuf:"varint,8,opt,name=number_of_executed_orders,json=numberOfExecutedOrders,proto3" json:"number_of_executed_orders,omitempty"`
}

func (x *AddParticipantToTradeResponse) Reset() {
	*x = AddParticipantToTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddParticipantToTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddParticipantToTradeResponse) ProtoMessage() {}

func (x *AddParticipantToTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddParticipantToTradeResponse.ProtoReflect.Descriptor instead.
func (*AddParticipantToTradeResponse) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{4}
}

func (x *AddParticipantToTradeResponse) GetExchangeTradeId() string {
	if x != nil {
		return x.ExchangeTradeId
	}
	return ""
}

func (x *AddParticipantToTradeResponse) GetTradeParticipantId() string {
	if x != nil {
		return x.TradeParticipantId
	}
	return ""
}

func (x *AddParticipantToTradeResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AddParticipantToTradeResponse) GetNotionalSize() float32 {
	if x != nil {
		return x.NotionalSize
	}
	return 0
}

func (x *AddParticipantToTradeResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AddParticipantToTradeResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *AddParticipantToTradeResponse) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AddParticipantToTradeResponse) GetNumberOfExecutedOrders() int64 {
	if x != nil {
		return x.NumberOfExecutedOrders
	}
	return 0
}

type ReadTradeByTradeIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
}

func (x *ReadTradeByTradeIDRequest) Reset() {
	*x = ReadTradeByTradeIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTradeByTradeIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTradeByTradeIDRequest) ProtoMessage() {}

func (x *ReadTradeByTradeIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTradeByTradeIDRequest.ProtoReflect.Descriptor instead.
func (*ReadTradeByTradeIDRequest) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{5}
}

func (x *ReadTradeByTradeIDRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

type ReadTradeByTradeIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade *Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *ReadTradeByTradeIDResponse) Reset() {
	*x = ReadTradeByTradeIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTradeByTradeIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTradeByTradeIDResponse) ProtoMessage() {}

func (x *ReadTradeByTradeIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s_trade_engine_proto_tradeengine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTradeByTradeIDResponse.ProtoReflect.Descriptor instead.
func (*ReadTradeByTradeIDResponse) Descriptor() ([]byte, []int) {
	return file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{6}
}

func (x *ReadTradeByTradeIDResponse) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

var File_s_trade_engine_proto_tradeengine_proto protoreflect.FileDescriptor

var file_s_trade_engine_proto_tradeengine_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x05, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a,
	0x0c, 0x64, 0x63, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x52, 0x0b, 0x64, 0x63, 0x61, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0xe4, 0x02, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2a, 0x43, 0x0a, 0x0a, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x2a,
	0x34, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0a, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x45, 0x52, 0x50, 0x45, 0x54, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x4c, 0x59,
	0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x44, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53,
	0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x02, 0x2a, 0x68, 0x0a, 0x0a,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x43, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x43, 0x41, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x0c, 0x44, 0x43, 0x41, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x32, 0xf4, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x3b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_s_trade_engine_proto_tradeengine_proto_rawDescOnce sync.Once
	file_s_trade_engine_proto_tradeengine_proto_rawDescData = file_s_trade_engine_proto_tradeengine_proto_rawDesc
)

func file_s_trade_engine_proto_tradeengine_proto_rawDescGZIP() []byte {
	file_s_trade_engine_proto_tradeengine_proto_rawDescOnce.Do(func() {
		file_s_trade_engine_proto_tradeengine_proto_rawDescData = protoimpl.X.CompressGZIP(file_s_trade_engine_proto_tradeengine_proto_rawDescData)
	})
	return file_s_trade_engine_proto_tradeengine_proto_rawDescData
}

var file_s_trade_engine_proto_tradeengine_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_s_trade_engine_proto_tradeengine_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_s_trade_engine_proto_tradeengine_proto_goTypes = []interface{}{
	(ACTOR_TYPE)(0),                       // 0: ACTOR_TYPE
	(TRADE_SIDE)(0),                       // 1: TRADE_SIDE
	(TRADE_STATUS)(0),                     // 2: TRADE_STATUS
	(TRADE_TYPE)(0),                       // 3: TRADE_TYPE
	(TRADE_PAIR)(0),                       // 4: TRADE_PAIR
	(ORDER_TYPE)(0),                       // 5: ORDER_TYPE
	(DCA_STRATEGY)(0),                     // 6: DCA_STRATEGY
	(*Trade)(nil),                         // 7: Trade
	(*CreateTradeRequest)(nil),            // 8: CreateTradeRequest
	(*CreateTradeResponse)(nil),           // 9: CreateTradeResponse
	(*AddParticipantToTradeRequest)(nil),  // 10: AddParticipantToTradeRequest
	(*AddParticipantToTradeResponse)(nil), // 11: AddParticipantToTradeResponse
	(*ReadTradeByTradeIDRequest)(nil),     // 12: ReadTradeByTradeIDRequest
	(*ReadTradeByTradeIDResponse)(nil),    // 13: ReadTradeByTradeIDResponse
	(*timestamppb.Timestamp)(nil),         // 14: google.protobuf.Timestamp
}
var file_s_trade_engine_proto_tradeengine_proto_depIdxs = []int32{
	0,  // 0: Trade.actor_type:type_name -> ACTOR_TYPE
	5,  // 1: Trade.order_type:type_name -> ORDER_TYPE
	3,  // 2: Trade.trade_type:type_name -> TRADE_TYPE
	4,  // 3: Trade.pair:type_name -> TRADE_PAIR
	2,  // 4: Trade.status:type_name -> TRADE_STATUS
	14, // 5: Trade.created:type_name -> google.protobuf.Timestamp
	14, // 6: Trade.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 7: Trade.trade_side:type_name -> TRADE_SIDE
	7,  // 8: CreateTradeRequest.trade:type_name -> Trade
	14, // 9: CreateTradeResponse.created:type_name -> google.protobuf.Timestamp
	6,  // 10: AddParticipantToTradeRequest.dca_strategy:type_name -> DCA_STRATEGY
	14, // 11: AddParticipantToTradeResponse.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 12: ReadTradeByTradeIDResponse.trade:type_name -> Trade
	8,  // 13: tradeengine.CreateTrade:input_type -> CreateTradeRequest
	10, // 14: tradeengine.AddParticipantToTrade:input_type -> AddParticipantToTradeRequest
	12, // 15: tradeengine.ReadTradeByTradeID:input_type -> ReadTradeByTradeIDRequest
	9,  // 16: tradeengine.CreateTrade:output_type -> CreateTradeResponse
	11, // 17: tradeengine.AddParticipantToTrade:output_type -> AddParticipantToTradeResponse
	13, // 18: tradeengine.ReadTradeByTradeID:output_type -> ReadTradeByTradeIDResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_s_trade_engine_proto_tradeengine_proto_init() }
func file_s_trade_engine_proto_tradeengine_proto_init() {
	if File_s_trade_engine_proto_tradeengine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddParticipantToTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddParticipantToTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTradeByTradeIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s_trade_engine_proto_tradeengine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTradeByTradeIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s_trade_engine_proto_tradeengine_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s_trade_engine_proto_tradeengine_proto_goTypes,
		DependencyIndexes: file_s_trade_engine_proto_tradeengine_proto_depIdxs,
		EnumInfos:         file_s_trade_engine_proto_tradeengine_proto_enumTypes,
		MessageInfos:      file_s_trade_engine_proto_tradeengine_proto_msgTypes,
	}.Build()
	File_s_trade_engine_proto_tradeengine_proto = out.File
	file_s_trade_engine_proto_tradeengine_proto_rawDesc = nil
	file_s_trade_engine_proto_tradeengine_proto_goTypes = nil
	file_s_trade_engine_proto_tradeengine_proto_depIdxs = nil
}
