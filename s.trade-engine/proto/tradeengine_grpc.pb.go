// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tradeengineproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradeengineClient is the client API for Tradeengine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeengineClient interface {
	CreateTradeStrategy(ctx context.Context, in *CreateTradeStrategyRequest, opts ...grpc.CallOption) (*CreateTradeStrategyResponse, error)
	ExecuteTradeStrategyForParticipant(ctx context.Context, in *ExecuteTradeStrategyForParticipantRequest, opts ...grpc.CallOption) (*ExecuteTradeStrategyForParticipantResponse, error)
	ReadTradeByTradeID(ctx context.Context, in *ReadTradeByTradeIDRequest, opts ...grpc.CallOption) (*ReadTradeByTradeIDResponse, error)
}

type tradeengineClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeengineClient(cc grpc.ClientConnInterface) TradeengineClient {
	return &tradeengineClient{cc}
}

func (c *tradeengineClient) CreateTradeStrategy(ctx context.Context, in *CreateTradeStrategyRequest, opts ...grpc.CallOption) (*CreateTradeStrategyResponse, error) {
	out := new(CreateTradeStrategyResponse)
	err := c.cc.Invoke(ctx, "/tradeengine/CreateTradeStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeengineClient) ExecuteTradeStrategyForParticipant(ctx context.Context, in *ExecuteTradeStrategyForParticipantRequest, opts ...grpc.CallOption) (*ExecuteTradeStrategyForParticipantResponse, error) {
	out := new(ExecuteTradeStrategyForParticipantResponse)
	err := c.cc.Invoke(ctx, "/tradeengine/ExecuteTradeStrategyForParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeengineClient) ReadTradeByTradeID(ctx context.Context, in *ReadTradeByTradeIDRequest, opts ...grpc.CallOption) (*ReadTradeByTradeIDResponse, error) {
	out := new(ReadTradeByTradeIDResponse)
	err := c.cc.Invoke(ctx, "/tradeengine/ReadTradeByTradeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeengineServer is the server API for Tradeengine service.
// All implementations must embed UnimplementedTradeengineServer
// for forward compatibility
type TradeengineServer interface {
	CreateTradeStrategy(context.Context, *CreateTradeStrategyRequest) (*CreateTradeStrategyResponse, error)
	ExecuteTradeStrategyForParticipant(context.Context, *ExecuteTradeStrategyForParticipantRequest) (*ExecuteTradeStrategyForParticipantResponse, error)
	ReadTradeByTradeID(context.Context, *ReadTradeByTradeIDRequest) (*ReadTradeByTradeIDResponse, error)
	mustEmbedUnimplementedTradeengineServer()
}

// UnimplementedTradeengineServer must be embedded to have forward compatible implementations.
type UnimplementedTradeengineServer struct {
}

func (*UnimplementedTradeengineServer) CreateTradeStrategy(context.Context, *CreateTradeStrategyRequest) (*CreateTradeStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeStrategy not implemented")
}
func (*UnimplementedTradeengineServer) ExecuteTradeStrategyForParticipant(context.Context, *ExecuteTradeStrategyForParticipantRequest) (*ExecuteTradeStrategyForParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTradeStrategyForParticipant not implemented")
}
func (*UnimplementedTradeengineServer) ReadTradeByTradeID(context.Context, *ReadTradeByTradeIDRequest) (*ReadTradeByTradeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTradeByTradeID not implemented")
}
func (*UnimplementedTradeengineServer) mustEmbedUnimplementedTradeengineServer() {}

func RegisterTradeengineServer(s *grpc.Server, srv TradeengineServer) {
	s.RegisterService(&_Tradeengine_serviceDesc, srv)
}

func _Tradeengine_CreateTradeStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeengineServer).CreateTradeStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradeengine/CreateTradeStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeengineServer).CreateTradeStrategy(ctx, req.(*CreateTradeStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tradeengine_ExecuteTradeStrategyForParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTradeStrategyForParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeengineServer).ExecuteTradeStrategyForParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradeengine/ExecuteTradeStrategyForParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeengineServer).ExecuteTradeStrategyForParticipant(ctx, req.(*ExecuteTradeStrategyForParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tradeengine_ReadTradeByTradeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTradeByTradeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeengineServer).ReadTradeByTradeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradeengine/ReadTradeByTradeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeengineServer).ReadTradeByTradeID(ctx, req.(*ReadTradeByTradeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tradeengine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tradeengine",
	HandlerType: (*TradeengineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTradeStrategy",
			Handler:    _Tradeengine_CreateTradeStrategy_Handler,
		},
		{
			MethodName: "ExecuteTradeStrategyForParticipant",
			Handler:    _Tradeengine_ExecuteTradeStrategyForParticipant_Handler,
		},
		{
			MethodName: "ReadTradeByTradeID",
			Handler:    _Tradeengine_ReadTradeByTradeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.trade-engine/proto/tradeengine.proto",
}
